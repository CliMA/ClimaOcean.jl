using PythonCall

struct PyCOAREFluxFormulation{S, P, N}
    mypythonscript :: S
    np :: P
    solver_stop_criteria :: N
end

using ClimaOcean.OceanSeaIceModels.InterfaceComputations: InterfaceState, zero_interface_state
import ClimaOcean.OceanSeaIceModels.InterfaceComputations: compute_interface_state

sys = pyimport("sys")
sys.path.insert(0, "/Users/simonesilvestri/development/COARE-algorithm/Python/COARE3.6")

PyCOAREFluxFormulation() = PyCOAREFluxFormulation(pyimport("coare36vn_zrf_et"), pyimport("numpy"), nothing)

# Iterating condition for the characteristic scales solvers
@inline function compute_interface_state(flux_formulation::PyCOAREFluxFormulation,
                                         initial_interface_state,
                                         atmosphere_state,
                                         interior_state,
                                         downwelling_radiation,
                                         interface_properties,
                                         atmosphere_properties,
                                         interior_properties)

    Œ®‚Çê = atmosphere_state
    Œ®·µ¢ = interior_state
    Œ®‚Çõ = initial_interface_state

    np = flux_formulation.np
    u‚Çê = Œ®‚Çê.u
    v‚Çê = Œ®‚Çê.v
    u·µ¢ = Œ®·µ¢.u
    v·µ¢ = Œ®·µ¢.v

    ùí∞ = np.array([sqrt((u‚Çê - u·µ¢)^2 + (v‚Çê - v·µ¢)^2)])

    r‚Çê = np.array([Œ®‚Çê.r])
    zu = 10.0
    zt = 10.0
    zq = 10.0
    S·µ¢ = np.array([Œ®·µ¢.S])
    p‚Çê = np.array([Œ®‚Çê.ùí¨.p / 101.325]) # Should be in mb
    T‚Çê = np.array([Œ®‚Çê.ùí¨.T - 273.15])  # Should be in ·µíC
    T·µ¢ = np.array([Œ®·µ¢.T - 273.15])    # Should be in ·µíC
    Qs = np.array([0.0])
    Q‚Ñì = np.array([0.0])
    zi = 512

    # out = np.array([usr,tau,hsb,hlb,hbb,hsbb,hlwebb,tsr,qsr,zo,zot,zoq,Cd,Ch,Ce,L,zeta,dT_skinx,dq_skinx,dz_skin,Urf,Trf,Qrf,RHrf,UrfN,TrfN,QrfN,lw_net,sw_net,Le,rhoa,UN,U10,U10N,Cdn_10,Chn_10,Cen_10,hrain,Qs,Evap,T10,T10N,Q10,Q10N,RH10,P10,rhoa10,gust,wc_frac,Edis])

    output = flux_formulation.mypythonscript.coare36vn_zrf_et(ùí∞, zu, T‚Çê, zt, r‚Çê, zq, p‚Çê, T·µ¢, 0, 0, 0, 0, 1, zi, 0, S·µ¢) 
    output = PythonCall.pyconvert(Array, output[0])
    
    u‚òÖ = convert(eltype(Œ®‚Çê.r), output[1])
    Œ∏‚òÖ = convert(eltype(Œ®‚Çê.r), output[8])
    q‚òÖ = convert(eltype(Œ®‚Çê.r), output[9])
    Œ®‚Çõ = InterfaceState(u‚òÖ, Œ∏‚òÖ, q‚òÖ, u·µ¢, v·µ¢, Œ®·µ¢.T , Œ®·µ¢.S, Œ®‚Çê.r)

    return Œ®‚Çõ
end