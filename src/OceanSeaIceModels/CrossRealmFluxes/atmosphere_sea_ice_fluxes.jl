#####
##### Surface flux computation
#####

function compute_atmosphere_sea_ice_fluxes!(coupled_model)
    ocean = coupled_model.ocean
    atmosphere = coupled_model.atmosphere
    sea_ice = coupled_model.sea_ice
    grid = ocean.model.grid
    arch = architecture(grid)
    clock = coupled_model.clock

    heat_flux            = coupled_model.fluxes.total.sea_ice.top_heat
    similarity_theory    = coupled_model.fluxes.turbulent.coefficients.sea_ice
    radiation_properties = coupled_model.fluxes.radiation
    turbulent_fluxes     = coupled_model.fluxes.turbulent.fields.sea_ice

    sea_ice_state = (u = ocean.model.velocities.u,
                     v = ocean.model.velocities.v,
                     T = ocean.model.tracers.T,
                     S = ocean.model.tracers.S)

    surface_phase = AtmosphericThermodynamics.Ice()

    surface_atmosphere_fields = coupled_model.fluxes.surface_atmosphere_state

    # Simplify NamedTuple to reduce parameter space consumption.
    # See https://github.com/CliMA/ClimaOcean.jl/issues/116.
    surface_atmosphere_data = (u = surface_atmosphere_fields.u.data,
                               v = surface_atmosphere_fields.v.data,
                               T = surface_atmosphere_fields.T.data,
                               p = surface_atmosphere_fields.p.data,
                               q = surface_atmosphere_fields.q.data,
                               Qs = surface_atmosphere_fields.Qs.data,
                               Q‚Ñì = surface_atmosphere_fields.Q‚Ñì.data,
                               Mp = surface_atmosphere_fields.Mp.data)

    kernel_parameters = surface_computations_kernel_parameters(grid)

    launch!(arch, grid, kernel_parameters,
            _compute_atmosphere_sea_ice_turbulent_fluxes!,
            turbulent_fluxes,
            similarity_theory,
            grid,
            clock,
            sea_ice_state,
            surface_phase, 
            coupled_model.fluxes.ocean_reference_density,
            coupled_model.fluxes.ocean_heat_capacity,
            coupled_model.fluxes.ocean_temperature_units,
            surface_atmosphere_data,
            radiation_properties.stefan_boltzmann_constant,
            radiation_properties.reflection.sea_ice,
            radiation_properties.emission.sea_ice,
            coupled_model.fluxes.turbulent.water_mole_fraction,
            coupled_model.fluxes.turbulent.water_vapor_saturation,
            atmosphere.reference_height, # height at which the state is known
            atmosphere.boundary_layer_height,
            atmosphere.thermodynamics_parameters)

    #####
    ##### Finally cobble together and properly interpolate fluxes
    ##### to be used by the ocean model.
    #####

    interpolated_downwelling_radiation = (shortwave = surface_atmosphere_data.Qs,
                                          longwave = surface_atmosphere_data.Q‚Ñì)
    
    launch!(arch, grid, kernel_parameters,
            _assemble_atmosphere_sea_ice_fluxes!,
            heat_flux,
            grid,
            clock,
            sea_ice_state.T,
            coupled_model.fluxes.ocean_temperature_units,
            turbulent_fluxes, 
            interpolated_downwelling_radiation,
            radiation_properties.stefan_boltzmann_constant,
            radiation_properties.reflection.sea_ice,
            radiation_properties.emission.sea_ice)
                
    return nothing
end

using Oceananigans.Grids: inactive_node

""" Compute turbulent fluxes between an atmosphere and a surface state using similarity theory """
@kernel function _compute_atmosphere_sea_ice_turbulent_fluxes!(fluxes_fields,
                                                               coefficients,
                                                               grid,
                                                               clock,
                                                               surface_state,
                                                               surface_phase,
                                                               surface_density,
                                                               surface_heat_capacity,
                                                               surface_temperature_units,
                                                               surface_atmos_state,
                                                               stefan_boltzmann_constant,
                                                               albedo,
                                                               emissivity,
                                                               mole_fraction,
                                                               vapor_saturation,
                                                               atmosphere_reference_height,
                                                               atmosphere_boundary_layer_height,
                                                               atmos_thermodynamics_parameters)

    i, j = @index(Global, NTuple)
    k·¥∫   = size(grid, 3) # index of the top ocean cell
    time = Time(clock.time)

    @inbounds begin
        u‚Çê = surface_atmos_state.u[i, j, 1]
        v‚Çê = surface_atmos_state.v[i, j, 1]
        T‚Çê = surface_atmos_state.T[i, j, 1]
        p‚Çê = surface_atmos_state.p[i, j, 1]
        q‚Çê = surface_atmos_state.q[i, j, 1]
        Qs = surface_atmos_state.Qs[i, j, 1]
        Q‚Ñì = surface_atmos_state.Q‚Ñì[i, j, 1]

        # Extract state variables at cell centers
        # Ocean state
        u‚Çõ = ‚Ñëx·∂ú·µÉ·µÉ(i, j, k·¥∫, grid, surface_state.u)
        v‚Çõ = ‚Ñëy·µÉ·∂ú·µÉ(i, j, k·¥∫, grid, surface_state.v)
        T‚Çõ = surface_state.T[i, j, k·¥∫]
        T‚Çõ = convert_to_kelvin(surface_temperature_units, T‚Çõ)
        S‚Çõ = surface_state.S[i, j, k·¥∫]
    end

    # Build thermodynamic and dynamic states in the atmosphere and surface.
    # Notation:
    #   ‚ãÖ ùí¨ ‚â° thermodynamic state vector
    #   ‚ãÖ ùí∞ ‚â° "dynamic" state vector (thermodynamics + reference height + velocity)
    ‚ÑÇ‚Çê = atmos_thermodynamics_parameters
    ùí¨‚Çê = thermodynamic_atmospheric_state = AtmosphericThermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çê, q‚Çê)

    h‚Çê = atmosphere_reference_height # elevation of atmos variables relative to surface
    
    U‚Çê = SVector(u‚Çê, v‚Çê)
    ùí∞‚Çê = dynamic_atmos_state = SurfaceFluxes.StateValues(h‚Çê, U‚Çê, ùí¨‚Çê)

    # Build surface state with saturated specific humidity
    q‚Çõ = seawater_saturation_specific_humidity(‚ÑÇ‚Çê, T‚Çõ, S‚Çõ, ùí¨‚Çê,
                                               mole_fraction,
                                               vapor_saturation,
                                               surface_phase)
    
    # Thermodynamic and dynamic surface state:
    U‚Çõ = SVector(u‚Çõ, v‚Çõ)
     
    ùí¨‚ÇÄ = thermodynamic_surface_state = AtmosphericThermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çõ, q‚Çõ)
    h‚ÇÄ = zero(grid) # surface height
    ùí∞‚ÇÄ = dynamic_surface_state = SurfaceFluxes.StateValues(h‚ÇÄ, U‚Çõ, ùí¨‚ÇÄ)

    # Some parameters
    g = default_gravitational_acceleration
    
    surface_salinity = S‚Çõ
    œÉ = stefan_boltzmann_constant
    Œ± = stateindex(albedo, i, j, 1, grid, time)
    œµ = stateindex(emissivity, i, j, 1, grid, time)
    prescribed_heat_fluxes = net_downwelling_radiation(i, j, grid, time, Œ±, œµ, Qs, Q‚Ñì) 
    inactive_cell = inactive_node(i, j, k·¥∫, grid, Center(), Center(), Center())

    turbulent_fluxes, surface_temperature = compute_turbulent_fluxes(coefficients,
                                                                     dynamic_surface_state, 
                                                                     dynamic_atmos_state, 
                                                                     prescribed_heat_fluxes,
                                                                     œÉ, Œ±, œµ,
                                                                     surface_phase,
                                                                     surface_salinity,
                                                                     surface_density,
                                                                     surface_heat_capacity,
                                                                     mole_fraction,
                                                                     vapor_saturation,
                                                                     atmosphere_boundary_layer_height,
                                                                     ‚ÑÇ‚Çê, g, inactive_cell)

    # Store fluxes
    Qv = fluxes_fields.latent_heat
    Qc = fluxes_fields.sensible_heat
    Fv = fluxes_fields.water_vapor
    œÅœÑx = fluxes_fields.x_momentum
    œÅœÑy = fluxes_fields.y_momentum
    Ts  = fluxes_fields.T_surface

    @inbounds begin
        # +0: cooling, -0: heating
        Qv[i, j, 1]  = ifelse(inactive_cell, 0, turbulent_fluxes.latent_heat)
        Qc[i, j, 1]  = ifelse(inactive_cell, 0, turbulent_fluxes.sensible_heat)
        Fv[i, j, 1]  = ifelse(inactive_cell, 0, turbulent_fluxes.water_vapor)
        œÅœÑx[i, j, 1] = ifelse(inactive_cell, 0, turbulent_fluxes.x_momentum)
        œÅœÑy[i, j, 1] = ifelse(inactive_cell, 0, turbulent_fluxes.y_momentum)
        Ts[i, j, 1]  = surface_temperature
    end
end

