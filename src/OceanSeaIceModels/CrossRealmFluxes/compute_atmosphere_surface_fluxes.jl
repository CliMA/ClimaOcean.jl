using Oceananigans.Grids: inactive_node

""" Compute turbulent fluxes between an atmosphere and a surface state using similarity theory """
@kernel function _compute_atmosphere_surface_similarity_theory_fluxes!(fluxes_fields,
                                                                       coefficients,
                                                                       grid,
                                                                       clock,
                                                                       surface_state,
                                                                       surface_phase,
                                                                       surface_density,
                                                                       surface_heat_capacity,
                                                                       surface_temperature_units,
                                                                       surface_atmos_state,
                                                                       radiation,
                                                                       mole_fraction,
                                                                       vapor_saturation,
                                                                       atmosphere_reference_height,
                                                                       atmosphere_boundary_layer_height,
                                                                       atmos_thermodynamics_parameters)

    i, j = @index(Global, NTuple)
    k·¥∫   = size(grid, 3) # index of the top ocean cell
    time = Time(clock.time)

    @inbounds begin
        u‚Çê = surface_atmos_state.u[i, j, 1]
        v‚Çê = surface_atmos_state.v[i, j, 1]
        T‚Çê = surface_atmos_state.T[i, j, 1]
        p‚Çê = surface_atmos_state.p[i, j, 1]
        q‚Çê = surface_atmos_state.q[i, j, 1]
        Rs = surface_atmos_state.Qs[i, j, 1]
        R‚Ñì = surface_atmos_state.Q‚Ñì[i, j, 1]

        # Extract state variables at cell centers
        # Ocean state
        u‚Çí = ‚Ñëx·∂ú·µÉ·µÉ(i, j, k·¥∫, grid, surface_state.u)
        v‚Çí = ‚Ñëy·µÉ·∂ú·µÉ(i, j, k·¥∫, grid, surface_state.v)
        T‚Çí = surface_state.T[i, j, k·¥∫]
        T‚Çí = convert_to_kelvin(surface_temperature_units, T‚Çí)
        S‚Çí = surface_state.S[i, j, k·¥∫]
    end

    # Build thermodynamic and dynamic states in the atmosphere and surface.
    # Notation:
    #   ‚ãÖ ùí¨ ‚â° thermodynamic state vector
    #   ‚ãÖ ùí∞ ‚â° "dynamic" state vector (thermodynamics + reference height + velocity)
    ‚ÑÇ‚Çê = atmos_thermodynamics_parameters
    ùí¨‚Çê = thermodynamic_atmospheric_state = AtmosphericThermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çê, q‚Çê)

    h‚Çê = atmosphere_reference_height # elevation of atmos variables relative to surface
    
    U‚Çê = SVector(u‚Çê, v‚Çê)
    ùí∞‚Çê = dynamic_atmos_state = SurfaceFluxes.StateValues(h‚Çê, U‚Çê, ùí¨‚Çê)

    # Build surface state with saturated specific humidity
    q‚Çí = seawater_saturation_specific_humidity(‚ÑÇ‚Çê, T‚Çí, S‚Çí, ùí¨‚Çê,
                                               mole_fraction,
                                               vapor_saturation,
                                               surface_phase)

    # Thermodynamic and dynamic (ocean) surface state:
    U‚Çí = SVector(u‚Çí, v‚Çí)
     
    ùí¨‚ÇÄ = thermodynamic_surface_state = AtmosphericThermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çí, q‚Çí)
    h‚ÇÄ = zero(grid) # surface height
    ùí∞‚ÇÄ = dynamic_surface_state = SurfaceFluxes.StateValues(h‚ÇÄ, U‚Çí, ùí¨‚ÇÄ)

    # Some parameters
    g = default_gravitational_acceleration
    
    surface_salinity = S‚Çí
    prescribed_heat_fluxes = net_downwelling_radiation(i, j, grid, time, radiation, Rs, R‚Ñì) 
    radiative_properties = local_radiation_properties(i, j, k·¥∫, grid, time, radiation)
    inactive_cell = inactive_node(i, j, k·¥∫, grid, Center(), Center(), Center())

    turbulent_fluxes, surface_temperature = compute_turbulent_fluxes(coefficients,
                                                                     dynamic_surface_state, 
                                                                     dynamic_atmos_state, 
                                                                     prescribed_heat_fluxes,
                                                                     radiative_properties,
                                                                     surface_phase,
                                                                     surface_salinity,
                                                                     surface_density,
                                                                     surface_heat_capacity,
                                                                     mole_fraction,
                                                                     vapor_saturation,
                                                                     atmosphere_boundary_layer_height,
                                                                     ‚ÑÇ‚Çê, g, inactive_cell)

    # Store fluxes
    Qv = fluxes_fields.latent_heat
    Qc = fluxes_fields.sensible_heat
    Fv = fluxes_fields.water_vapor
    œÅœÑx = fluxes_fields.x_momentum
    œÅœÑy = fluxes_fields.y_momentum
    Ts  = fluxes_fields.T_surface

    @inbounds begin
        # +0: cooling, -0: heating
        Qv[i, j, 1]  = ifelse(inactive_cell, 0, turbulent_fluxes.latent_heat)
        Qc[i, j, 1]  = ifelse(inactive_cell, 0, turbulent_fluxes.sensible_heat)
        Fv[i, j, 1]  = ifelse(inactive_cell, 0, turbulent_fluxes.water_vapor)
        œÅœÑx[i, j, 1] = ifelse(inactive_cell, 0, turbulent_fluxes.x_momentum)
        œÅœÑy[i, j, 1] = ifelse(inactive_cell, 0, turbulent_fluxes.y_momentum)
        Ts[i, j, 1]  = surface_temperature
    end
end

@kernel function _assemble_atmosphere_sea_ice_fluxes!(centered_velocity_fluxes,
                                                      net_tracer_fluxes,
                                                      grid,
                                                      clock,
                                                      sea_ice_temperature,
                                                      sea_ice_salinity,
                                                      sea_ice_temperature_units,
                                                      turbulent_fluxes,
                                                      downwelling_radiation,
                                                      prescribed_freshwater_flux,
                                                      radiation_properties,
                                                      sea_ice_reference_density,
                                                      sea_ice_heat_capacity,
                                                      freshwater_density)

    i, j = @index(Global, NTuple)
    k·¥∫ = size(grid, 3)
    time = Time(clock.time)

    @inbounds begin
        T‚Çí = sea_ice_temperature[i, j, k·¥∫]
        T‚Çí = convert_to_kelvin(sea_ice_temperature_units, T‚Çí)
        S‚Çí = sea_ice_salinity[i, j, k·¥∫]

        Qs = downwelling_radiation.shortwave[i, j, 1]
        Q‚Ñì = downwelling_radiation.longwave[i, j, 1]

        Mp = prescribed_freshwater_flux[i, j, 1]

        Qc  = turbulent_fluxes.sensible_heat[i, j, 1] # sensible or "conductive" heat flux
        Qv  = turbulent_fluxes.latent_heat[i, j, 1]   # latent heat flux
        Mv  = turbulent_fluxes.water_vapor[i, j, 1]   # mass flux of water vapor
        œÅœÑx = turbulent_fluxes.x_momentum[i, j, 1]    # zonal momentum flux
        œÅœÑy = turbulent_fluxes.y_momentum[i, j, 1]    # meridional momentum flux
    end

    # Compute heat fluxes, bulk flux first
    Qd = net_downwelling_radiation(i, j, grid, time, radiation_properties, Qs, Q‚Ñì)
    Qu = net_upwelling_radiation(i, j, grid, time, radiation_properties, T‚Çí)

    Œ£Q = Qd + Qu + Qc + Qv

    # Convert from a mass flux to a volume flux (aka velocity)
    # by dividing with the density of freshwater.
    # Also switch the sign, for some reason we are given freshwater flux as positive down.
    œÅf‚Åª¬π = 1 / freshwater_density
    Œ£F   = - Mp * œÅf‚Åª¬π

    # Add the contribution from the turbulent water vapor flux, which has
    # a different sign convention as the prescribed water mass fluxes (positive upwards)
    Fv = Mv * œÅf‚Åª¬π
    Œ£F += Fv

    # Compute fluxes for u, v, T, S from momentum, heat, and freshwater fluxes
    œÑx = centered_velocity_fluxes.u
    œÑy = centered_velocity_fluxes.v
    J·µÄ = net_tracer_fluxes.T
    JÀ¢ = net_tracer_fluxes.S

    œÅ‚Çí‚Åª¬π = 1 / sea_ice_reference_density
    c‚Çí   = sea_ice_heat_capacity

    atmos_ocean_œÑx = œÅœÑx * œÅ‚Çí‚Åª¬π
    atmos_ocean_œÑy = œÅœÑy * œÅ‚Çí‚Åª¬π
    atmos_ocean_J·µÄ = Œ£Q  * œÅ‚Çí‚Åª¬π / c‚Çí
    atmos_ocean_JÀ¢ = - S‚Çí * Œ£F

    # Mask fluxes over land for convenience
    inactive = inactive_node(i, j, k·¥∫, grid, c, c, c)

    @inbounds begin
        œÑx[i, j, 1] = ifelse(inactive, 0, atmos_ocean_œÑx)
        œÑy[i, j, 1] = ifelse(inactive, 0, atmos_ocean_œÑy)
        J·µÄ[i, j, 1] = ifelse(inactive, 0, atmos_ocean_J·µÄ)
        JÀ¢[i, j, 1] = ifelse(inactive, 0, atmos_ocean_JÀ¢)
    end
end
