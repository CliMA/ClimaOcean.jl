struct MomentumRoughnessLength{FT, V}
    gravitational_acceleration :: FT
    air_kinematic_viscosity :: V
    gravity_wave_parameter :: FT
    laminar_parameter :: FT
    maximum_roughness_length :: FT
end

struct ScalarRoughnessLength{FT, V, R}
    air_kinematic_viscosity :: V
    reynolds_number_scaling_function :: R
    maximum_roughness_length :: FT
end

"""
    ScalarRoughnessLength([FT=Float64];
                          air_kinematic_viscosity = temperature_dependent_viscosity,
                          reynolds_number_scaling_function = empirical_scaling_function,
                          maximum_roughness_length = 1.6e-4)

Constructs a `ScalarRoughnessLength` object that represents the scalar roughness length
that regulates the exchange of heat and water vapor between the ocean and the atmosphere.   

Keyword Arguments
==================

- `air_kinematic_viscosity::Function`: The function to compute the air kinematic viscosity.
- `reynolds_number_scaling_function::Function`: The function to compute the Reynolds number scaling factor.
- `maximum_roughness_length::Float`: The maximum roughness length value. Defaults to `1.6e-4`.
"""
function ScalarRoughnessLength(FT=Float64;
                               air_kinematic_viscosity = TemperatureDependentAirViscosity(FT),
                               reynolds_number_scaling_function = ReynoldsScalingFunction(FT),
                               maximum_roughness_length = 1.6e-4) # Values from COARE3.6

    return ScalarRoughnessLength(air_kinematic_viscosity,
                                 reynolds_number_scaling_function,
                                 convert(FT, maximum_roughness_length))
end

"""
    MomentumRoughnessLength([FT=Float64];
                            gravitational_acceleration = default_gravitational_acceleration,
                            maximum_roughness_length = 1.0,
                            air_kinematic_viscosity = TemperatureDependentAirViscosity(FT),
                            gravity_wave_parameter = 0.011,
                            laminar_parameter = 0.11)

Construct a `MomentumRoughnessLength` object that represents the momentum roughness length that
regulates the exchange of momentum, heat, and water vapor between the ocean and the atmosphere.

Keyword Arguments
=================

- `gravitational_acceleration`: The gravitational acceleration. Default: `default_gravitational_acceleration`.
- `maximum_roughness_length`: The maximum roughness length. Default: 1.0.
- `air_kinematic_viscosity`: The air kinematic viscosity. Default: `TemperatureDependentAirViscosity(FT)`.
- `gravity_wave_parameter`: The wave parameter. Default: 0.011.
- `laminar_parameter`: The laminar parameter. Default: 0.11.
"""
function MomentumRoughnessLength(FT=Float64;
                                 gravitational_acceleration = default_gravitational_acceleration,
                                 maximum_roughness_length = 1.0, # An estimate?
                                 air_kinematic_viscosity = TemperatureDependentAirViscosity(FT),
                                 gravity_wave_parameter = 0.011,
                                 laminar_parameter = 0.11)

    return MomentumRoughnessLength(convert(FT, gravitational_acceleration),
                                          air_kinematic_viscosity,
                                          convert(FT, gravity_wave_parameter),
                                          convert(FT, laminar_parameter),
                                          convert(FT, maximum_roughness_length))
end

function default_roughness_lengths(FT=Float64)
    momentum    = MomentumRoughnessLength(FT)
    temperature = ScalarRoughnessLength(FT)
    water_vapor = ScalarRoughnessLength(FT)
    return SimilarityScales(momentum, temperature, water_vapor)
end

# Temperature-dependent viscosity law
struct TemperatureDependentAirViscosity{FT}
    C‚ÇÄ :: FT
    C‚ÇÅ :: FT
    C‚ÇÇ :: FT
    C‚ÇÉ :: FT
end

"""
    TemperatureDependentAirViscosity([FT = Float64;
                                      C‚ÇÄ = 1.326e-5,
                                      C‚ÇÅ = C‚ÇÄ * 6.542e-3,
                                      C‚ÇÇ = C‚ÇÄ * 8.301e-6,
                                      C‚ÇÉ = - C‚ÇÄ * 4.84e-9])

Constructs a `TemperatureDependentAirViscosity` object that calculates the kinematic
viscosity of air as 
```math
C‚ÇÄ + C‚ÇÅ T + C‚ÇÇ T^2 + C‚ÇÉ T^3.
```
"""
function TemperatureDependentAirViscosity(FT = Float64;
                                          C‚ÇÄ = 1.326e-5,
                                          C‚ÇÅ = C‚ÇÄ * 6.542e-3,
                                          C‚ÇÇ = C‚ÇÄ * 8.301e-6,
                                          C‚ÇÉ = - C‚ÇÄ * 4.84e-9)

    return TemperatureDependentAirViscosity(convert(FT, C‚ÇÄ),
                                            convert(FT, C‚ÇÅ),
                                            convert(FT, C‚ÇÇ),
                                            convert(FT, C‚ÇÉ))
end   

""" Calculate the air viscosity based on the temperature Œ∏ in Celsius. """
@inline function (ŒΩ::TemperatureDependentAirViscosity)(Œ∏)
    FT = eltype(ŒΩ.C‚ÇÄ)
    T  = convert(FT, Œ∏ - celsius_to_kelvin)
    return ŒΩ.C‚ÇÄ + ŒΩ.C‚ÇÅ * T + ŒΩ.C‚ÇÇ * T^2 + ŒΩ.C‚ÇÉ * T^3
end

# Fallbacks for constant roughness length!
@inline roughness_length(‚Ñì, u‚òÖ, args...)     = ‚Ñì(u‚òÖ, args...)
@inline roughness_length(‚Ñì::Number, args...) = ‚Ñì

# Momentum roughness length should be different from scalar roughness length.
# Temperature and water vapor can be considered the same (Edson et al 2013)
@inline function roughness_length(‚Ñì::MomentumRoughnessLength{FT}, u‚òÖ, ùí¨, ‚ÑÇ) where FT
    g  = ‚Ñì.gravitational_acceleration
    Œ±  = ‚Ñì.gravity_wave_parameter
    Œ≤  = ‚Ñì.laminar_parameter
    ‚Ñìm = ‚Ñì.maximum_roughness_length

    Œ∏‚ÇÄ = AtmosphericThermodynamics.air_temperature(‚ÑÇ, ùí¨)
    ŒΩ  = ‚Ñì.air_kinematic_viscosity(Œ∏‚ÇÄ)

    # We need to prevent `Inf` that pops up when `u‚òÖ == 0`.
    # For this reason, if `u‚òÖ == 0` we prescribe the roughness length to be
    # equal to a `maximum` roughness length
    ‚Ñì·¥ø = ifelse(u‚òÖ == 0, ‚Ñìm, Œ≤ * ŒΩ / u‚òÖ) 
    
    return min(Œ± * u‚òÖ^2 / g + ‚Ñì·¥ø, ‚Ñìm)
end

struct ReynoldsScalingFunction{FT}
    A :: FT
    b :: FT
end

"""
    ReynoldsScalingFunction(FT = Float64; A = 5.85e-5, b = 0.72)

Empirical fit of the scalar roughness length with roughness Reynolds number `R‚òÖ = u‚òÖ ‚Ñìu / ŒΩ`.
Edson et al. (2013), equation (28).
```math
    ‚Ñìs = A / R‚òÖ ^ b
```
"""
ReynoldsScalingFunction(FT = Float64; A = 5.85e-5, b = 0.72) = 
    ReynoldsScalingFunction(convert(FT, A), convert(FT, b))

@inline (s::ReynoldsScalingFunction)(R‚òÖ, args...) = ifelse(R‚òÖ == 0, convert(eltype(R‚òÖ), 0), s.A / R‚òÖ ^ s.b)

# Edson 2013 formulation of scalar roughness length
@inline function roughness_length(‚Ñì::ScalarRoughnessLength{FT}, ‚Ñìu, u‚òÖ, ùí¨, ‚ÑÇ) where FT
    ‚Ñìm = ‚Ñì.maximum_roughness_length
    
    scaling_function = ‚Ñì.reynolds_number_scaling_function

    Œ∏‚ÇÄ = AtmosphericThermodynamics.air_temperature(‚ÑÇ, ùí¨)
    ŒΩ  = ‚Ñì.air_kinematic_viscosity(Œ∏‚ÇÄ)

    # Roughness Reynolds number
    R‚òÖ = ‚Ñìu * u‚òÖ / ŒΩ

    # implementation of scalar roughness length
    ‚Ñìq = scaling_function(R‚òÖ, ‚Ñìu, u‚òÖ, ŒΩ)

    return min(‚Ñìq, ‚Ñìm) 
end
