using Oceananigans.Operators: Œîz·∂ú·∂ú·∂ú
using ClimaSeaIce.SeaIceThermodynamics: melting_temperature

function compute_sea_ice_ocean_fluxes!(coupled_model)
    #compute_sea_ice_ocean_salinity_flux!(coupled_model)
    # sea_ice_ocean_latent_heat_flux!(coupled_model)
    return nothing
end

function compute_sea_ice_ocean_salinity_flux!(coupled_model)
    # Compute salinity increment due to changes in ice thickness

    sea_ice = coupled_model.sea_ice
    ocean = coupled_model.ocean
    grid = ocean.model.grid
    arch = architecture(grid)
    QÀ¢ = ocean.model.tracers.S.boundary_conditions.top.condition
    S‚Çí = ocean.model.tracers.S
    S·µ¢ = sea_ice.model.ice_salinity
    Œît = ocean.Œît
    h‚Åø = sea_ice.model.ice_thickness
    h‚Åª = coupled_model.fluxes.previous_ice_thickness

    # launch!(arch, grid, :xy, _compute_sea_ice_ocean_salinity_flux!,
    #         QÀ¢, grid, h‚Åø, h‚Åª, S·µ¢, S‚Çí, Œît)

    return nothing
end

@kernel function _compute_sea_ice_ocean_salinity_flux!(sea_ice_ocean_salinity_flux,
                                                       grid,
                                                       ice_thickness,
                                                       previous_ice_thickness,
                                                       ice_salinity,
                                                       ocean_salinity,
                                                       Œît)
    i, j = @index(Global, NTuple)

    Nz = size(grid, 3)

    h‚Åø = ice_thickness
    h‚Åª = previous_ice_thickness
    QÀ¢ = sea_ice_ocean_salinity_flux
    S·µ¢ = ice_salinity
    S‚Çí = ocean_salinity

    @inbounds begin
        # Change in thickness
        Œîh = h‚Åø[i, j, 1] - h‚Åª[i, j, 1]

        # Update surface salinity flux.
        # Note: the Œît below is the ocean time-step, eg.
        # ŒîS = ‚ãØ - ‚àÆ QÀ¢ dt ‚âà ‚ãØ - Œît‚Çí * QÀ¢ 
        QÀ¢[i, j, 1] = Œîh / Œît * (S·µ¢[i, j, 1] - S‚Çí[i, j, Nz])

        # Update previous ice thickness
        h‚Åª[i, j, 1] = h‚Åø[i, j, 1]
    end
end

function sea_ice_ocean_latent_heat_flux!(coupled_model)
    ocean = coupled_model.ocean
    sea_ice = coupled_model.sea_ice
    œÅ‚Çí = coupled_model.fluxes.ocean_reference_density
    c‚Çí = coupled_model.fluxes.ocean_heat_capacity
    Q‚Çí = sea_ice.model.external_heat_fluxes.bottom
    T‚Çí = ocean.model.tracers.T
    S‚Çí = ocean.model.tracers.S
    Œît = ocean.Œît
    h·µ¢ = sea_ice.model.ice_thickness

    liquidus = sea_ice.model.ice_thermodynamics.phase_transitions.liquidus
    grid = ocean.model.grid
    arch = architecture(grid)

    # What about the latent heat removed from the ocean when ice forms?
    # Is it immediately removed from the ocean? Or is it stored in the ice?
    launch!(arch, grid, :xy, _compute_sea_ice_ocean_latent_heat_flux!,
            Q‚Çí, grid, h·µ¢, T‚Çí, S‚Çí, liquidus, œÅ‚Çí, c‚Çí, Œît)

    return nothing
end

#=
function adjust_ice_covered_ocean_temperature!(coupled_model)
    sea_ice_ocean_latent_heat_flux!(coupled_model)
    sea_ice = coupled_model.sea_ice
    Q‚Çí = sea_ice.model.external_heat_fluxes.bottom
    parent(Q‚Çí) .= 0
    return nothing
end
=#

@kernel function _compute_sea_ice_ocean_latent_heat_flux!(latent_heat_flux,
                                                          grid,
                                                          ice_thickness,
                                                          ocean_temperature,
                                                          ocean_salinity,
                                                          liquidus,
                                                          œÅ‚Çí, c‚Çí, Œît)

    i, j = @index(Global, NTuple)

    Nz = size(grid, 3)
    Q‚Çí = latent_heat_flux
    h·µ¢ = ice_thickness
    T‚Çí = ocean_temperature
    S‚Çí = ocean_salinity

    Œ¥Q = zero(grid)
    icy_cell = @inbounds h·µ¢[i, j, 1] > 0 # make ice bath approximation then

    for k = Nz:-1:1
        @inbounds begin
            # Various quantities
            Œîz = Œîz·∂ú·∂ú·∂ú(i, j, k, grid)
            T·¥∫ = T‚Çí[i, j, k]
            S·¥∫ = S‚Çí[i, j, k]
        end

        # Melting / freezing temperature at the surface of the ocean
        T‚Çò = melting_temperature(liquidus, S·¥∫)
                                 
        # Conditions for non-zero ice-ocean flux:
        #   - the ocean is below the freezing temperature, causing formation of ice.
        freezing = T·¥∫ < T‚Çò 

        #   - We are at the surface and the cell is covered by ice.
        icy_surface_cell = (k == Nz) & icy_cell

        # When there is a non-zero ice-ocean flux, we will instantaneously adjust the
        # temperature of the grid cells accordingly.
        adjust_temperature = freezing | icy_surface_cell

        # Compute change in ocean heat energy.
        #
        #   - When T·¥∫ < T‚Çò, we heat the ocean back to melting temperature by extracting heat from the ice,
        #     assuming that the heat flux (which is carried by nascent ice crystals called frazil ice) floats
        #     instantaneously to the surface.
        #
        #   - When T·¥∫ > T‚Çò and we are in a surface cell covered by ice, we assume equilibrium
        #     and cool the ocean by injecting excess heat into the ice.
        # 
        Œ¥E‚Çí = adjust_temperature * œÅ‚Çí * c‚Çí * (T‚Çò - T·¥∫)

        # Perform temperature adjustment
        @inline T‚Çí[i, j, k] = ifelse(adjust_temperature, T‚Çò, T·¥∫)

        # Compute the heat flux from ocean into ice.
        #
        # A positive value Œ¥Q > 0 implies that the ocean is cooled; ie heat
        # is fluxing upwards, into the ice. This occurs when applying the
        # ice bath equilibrium condition to cool down a warm ocean (Œ¥E‚Çí < 0).
        #
        # A negative value Œ¥Q < 0 implies that heat is fluxed from the ice into
        # the ocean, cooling the ice and heating the ocean (Œ¥E‚Çí > 0). This occurs when
        # frazil ice is formed within the ocean.
        
        Œ¥Q -= Œ¥E‚Çí * Œîz / Œît
    end

    # Store ice-ocean flux
    @inbounds Q‚Çí[i, j, 1] = Œ¥Q
end

function limit_fluxes_over_sea_ice!(grid, kernel_parameters, sea_ice::SeaIceModel,
                                    staggered_velocity_fluxes,
                                    net_tracer_fluxes,
                                    ocean_state)

    launch!(architecture(grid), grid, kernel_parameters, _massage_fluxes_on_sea_ice!,
            staggered_velocity_fluxes,
            net_tracer_fluxes,
            grid, 
            sea_ice.ice_concentration,
            sea_ice.ice_dynamics.ocean_ice_drag_coefficient,
            sea_ice.velocities,
            ocean_state.u,
            ocean_state.v)

    return nothing
end

@kernel function _massage_fluxes_on_sea_ice!(staggered_velocity_fluxes,
                                             net_tracer_fluxes,
                                             grid, ‚Ñµ, C·¥∞, ùí∞·µ¢, u‚Çí, v‚Çí)    

    i, j = @index(Global, NTuple)

    @inbounds begin
        J·µò = staggered_velocity_fluxes.u
        J·µõ = staggered_velocity_fluxes.v
    
        sea_ice = ‚Ñµ[i, j, 1] > 0
        cooling_sea_ice = sea_ice & (J·µÄ[i, j, 1] > 0)

        # Don't allow the ocean to cool below the minimum temperature! (make sure it heats up though!)
	    # On the other hand, assume all heating fluxes are due to solar radiation and 
	    # multiply by a fictitious albedo
	    J·µÄ[i, j, 1] = ifelse(cooling_sea_ice, zero(grid), J·µÄ[i, j, 1]) 
        
        # If we are in a "sea ice" region we remove all fluxes
        JÀ¢[i, j, 1] = ifelse(sea_ice, zero(grid), JÀ¢[i, j, 1])
        J·µò[i, j, 1] = ifelse(sea_ice, C·¥∞ * (u‚ÇÄ[i, j, 1] - ùí∞·µ¢.u[i, j, 1]), J·µò[i, j, 1]) 
        J·µõ[i, j, 1] = ifelse(sea_ice, C·¥∞ * (v‚ÇÄ[i, j, 1] - ùí∞·µ¢.v[i, j, 1]), J·µõ[i, j, 1]) 
    end
end
