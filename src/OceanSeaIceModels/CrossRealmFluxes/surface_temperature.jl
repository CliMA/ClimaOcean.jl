using CUDA: @allowscalar
import Thermodynamics as AtmosphericThermodynamics  

####
#### Utilities
####

@inline upwelling_radiation(Œ∏‚ÇÄ, ::Nothing) = zero(Œ∏‚ÇÄ)
@inline upwelling_radiation(Œ∏‚ÇÄ, r) = r.œÉ * r.œµ * Œ∏‚ÇÄ^4

# For any surface temperture type that does not depend on the grid
regularize_surface_temperature_type(surface_temperature_type, grid) = surface_temperature_type

####
#### Prescribed surface temperature (the easiest case)
####

struct PrescribedSurfaceTemperature end

# Do nothing (just copy the temperature)
@inline compute_surface_temperature(::PrescribedSurfaceTemperature, Œ∏‚ÇÄ, args...) = Œ∏‚ÇÄ

####
#### Diagnostic surface temperature calculated as a flux balance
####

struct DiagnosticSurfaceTemperature{I}
    internal_flux :: I
end

struct DiffusiveFlux{Z, K}
    Œ¥ :: Z # Boundary layer thickness, as a first guess we will use half the grid spacing
    Œ∫ :: K # diffusivity in m¬≤s‚Åª¬π
end

# A default constructor for DiagnosticSurfaceTemperature
function DiagnosticSurfaceTemperature(; Œ∫ = 0.1, Œ¥ = nothing) 
    internal_flux = DiffusiveFlux(; Œ∫, Œ¥)
    return DiagnosticSurfaceTemperature(internal_flux)
end

DiffusiveFlux(; Œ∫ = 1e-2, Œ¥ = nothing) = DiffusiveFlux(Œ¥, Œ∫)

function DiffusiveFlux(grid; Œ∫ = 0.1, Œ¥ = nothing)
    if isnothing(Œ¥)
        Œ¥ = @allowscalar Œîz·∂ú·∂ú·∂ú(1, 1, grid.Nz, grid)
    end
    return DiffusiveFlux(Œ¥, Œ∫)
end

regularize_surface_temperature_type(T::DiagnosticSurfaceTemperature{<:DiffusiveFlux}, grid) =
    DiagnosticSurfaceTemperature(DiffusiveFlux(grid; Œ∫ = T.internal_flux.Œ∫, Œ¥ = T.internal_flux.Œ¥))

# The flux balance could be solved either
# 
#   Œò‚Çí - Œò‚Çõ‚Åø‚Å∫¬π
# Œ∫ ---------- = J·µÄ (all fluxes positive upwards)
#       Œ¥
#
# Where the LHS is the internal diffusive flux inside the ocean (within the boundary layer of thickness Œ¥) 
# and the RHS are the atmospheric and radiative fluxes are provided explicitly, or
# 
#   Œò‚Çí - Œò‚Çõ‚Åø‚Å∫¬π    œÉœµ Œ∏‚Çõ‚Åø‚Å∫¬πŒ∏‚Çõ‚Åø¬≥
# Œ∫ ---------- - ------------ = J·µÄ (all fluxes positive upwards)
#       Œ¥           œÅ‚Çí cp‚Çí
#
# Where the LHS is the internal diffusive flux inside the ocean (within the boundary layer of thickness Œ¥) 
# plus the (semi-implicit) outgoing longwave flux and the RHS are the remaining atmospheric and radiative fluxes
# provided explicitly.
@inline flux_balance_temperature(F::DiffusiveFlux, Œ∏‚Çí, J·µÄ) = (Œ∏‚Çí - J·µÄ / F.Œ∫ * F.Œ¥)

# he flaw here is that the ocean emissivity and albedo are fixed, but they might be a function of the 
# surface temperature, so we might need to pass the radiation and the albedo and emissivity as arguments.
@inline function compute_surface_temperature(st::DiagnosticSurfaceTemperature, Œ∏‚Çõ, ‚ÑÇ, ùí¨‚ÇÄ, 
                                            œÅ‚Çê, c‚Çö, ‚Ñ∞v, Œ£‚òÖ, œÅ‚Çí, cp‚Çí, g, 
                                            prescribed_heat_fluxes, 
                                            radiation_properties)

    Rd = prescribed_heat_fluxes # net downwelling radiation (positive out of the ocean)
    
    # upwelling radiation is calculated explicitly 
    Ru = upwelling_radiation(Œ∏‚Çõ, radiation_properties) 
    Rn = Rd + Ru # Net radiation (positive out of the ocean)
    
    u‚òÖ = Œ£‚òÖ.momentum
    Œ∏‚òÖ = Œ£‚òÖ.temperature
    q‚òÖ = Œ£‚òÖ.water_vapor
 
    # Turbulent heat fluxes, sensible + latent (positive out of the ocean)
    Qt = - œÅ‚Çê * u‚òÖ * (c‚Çö * Œ∏‚òÖ + q‚òÖ * ‚Ñ∞v)

    # Net temperature flux (positive out of the ocean)
    J·µÄ = (Qt + Rn) / œÅ‚Çí / cp‚Çí 

    Œ∏‚Çí = AtmosphericThermodynamics.air_temperature(‚ÑÇ, ùí¨‚ÇÄ)

    return flux_balance_temperature(st.internal_flux, Œ∏‚Çí, J·µÄ)
end