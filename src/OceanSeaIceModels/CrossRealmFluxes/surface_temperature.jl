using CUDA: @allowscalar
import Thermodynamics as AtmosphericThermodynamics  

####
#### Prescribed surface temperature
####

struct PrescribedSurfaceTemperature end

regularize_surface_temperature(::PrescribedSurfaceTemperature, grid) = PrescribedSurfaceTemperature()

# Do nothing (just copy the temperature)
@inline retrieve_temperature(::PrescribedSurfaceTemperature, Œ∏‚ÇÄ, args...) = Œ∏‚ÇÄ

####
#### Diagnostic surface temperature calculated as a flux balance
####

struct DiagnosticSurfaceTemperature{I}
    internal_flux :: I
end

struct DiffusiveFlux{Z, K}
    Œîz :: Z
    Œ∫  :: K # diffusivity in m¬≤s‚Åª¬π
end

# A default constructor for DiagnosticSurfaceTemperature
function DiagnosticSurfaceTemperature(; Œ∫ = 0.1) 
    internal_flux = DiffusiveFlux(; Œ∫)
    return DiagnosticSurfaceTemperature(internal_flux)
end

DiffusiveFlux(; Œ∫ = 1e-2) = DiffusiveFlux(nothing, Œ∫)

function DiffusiveFlux(grid; Œ∫ = 1e-2) 
    Œîz = @allowscalar Œîz·∂ú·∂ú·∂ú(1, 1, grid.Nz, grid)
    return DiffusiveFlux(Œîz, Œ∫)
end

regularize_surface_temperature(T::DiagnosticSurfaceTemperature{<:DiffusiveFlux}, grid) =
    DiagnosticSurfaceTemperature(DiffusiveFlux(grid; Œ∫ = T.internal_flux.Œ∫))

@inline flux_balance_temperature(F::DiffusiveFlux, Œ∏o, Qn) = Œ∏o + Qn / F.Œ∫ * F.Œîz

# Change ùí¨‚ÇÄ as a function of incoming and outgoing fluxes. The flaw here is that
# the ocean emissivity and albedo are fixed, but they might be a function of the 
# surface temperature, so we might need to pass actually the radiation and the 
# albedo and emissivity as arguments.
@inline function retrieve_temperature(st::DiagnosticSurfaceTemperature, Œ∏‚ÇÄ, ‚ÑÇ, ùí¨‚ÇÄ, 
                                      œÅ‚Çê, c‚Çö, ‚Ñ∞v, Œ£‚òÖ, œÅ‚Çí, cp‚Çí,
                                      prescribed_heat_fluxes, 
                                      radiation_properties)

    Rd = prescribed_heat_fluxes # net downwelling radiation (positive out of the ocean)
    
    # upwelling radiation is calculated explicitly 
    # TODO: we could calculate it semi-implicitly as œµœÉT‚Åø‚Å∫¬πT‚Åø¬≥
    Ru = upwelling_radiation(Œ∏‚ÇÄ, radiation_properties) 
    Rn = Ru + Rd # net radiation

    u‚òÖ = Œ£‚òÖ.momentum
    Œ∏‚òÖ = Œ£‚òÖ.temperature
    q‚òÖ = Œ£‚òÖ.water_vapor

    # sensible heat flux + latent heat flux
    Qs = - œÅ‚Çê * u‚òÖ * (c‚Çö * Œ∏‚òÖ + q‚òÖ * ‚Ñ∞v)

    # Net heat flux (positive out of the ocean)
    Qn = (Qs + Rn) / œÅ‚Çí / cp‚Çí
    Œ∏o = AtmosphericThermodynamics.air_temperature(‚ÑÇ, ùí¨‚ÇÄ)

    # surface temperature calculated as a balance of fluxes
    return flux_balance_temperature(st.internal_flux, Œ∏o, Qn)
end

@inline upwelling_radiation(Œ∏‚ÇÄ, ::Nothing) = zero(Œ∏‚ÇÄ)
@inline upwelling_radiation(Œ∏‚ÇÄ, r) = r.œÉ * r.œµ * Œ∏‚ÇÄ^4