using Oceananigans.Operators: intrinsic_vector
using Oceananigans.Grids: inactive_node
using Oceananigans.Fields: ZeroField

function compute_atmosphere_sea_ice_fluxes!(coupled_model)
    ocean = coupled_model.ocean
    atmosphere = coupled_model.atmosphere
    sea_ice = coupled_model.sea_ice
    grid = ocean.model.grid
    arch = architecture(grid)
    clock = coupled_model.clock

    interior_state = (u = ZeroField(),
                      v = ZeroField(),
                      h = sea_ice.model.ice_thickness,
                      ‚Ñµ = sea_ice.model.ice_concentration,
                      T‚Çí = ocean.model.tracers.T,
                      S‚Çí = ocean.model.tracers.S)

    atmosphere_fields = coupled_model.interfaces.near_surface_atmosphere_state

    # Simplify NamedTuple to reduce parameter space consumption.
    # See https://github.com/CliMA/ClimaOcean.jl/issues/116.
    atmosphere_data = (u = atmosphere_fields.u.data,
                       v = atmosphere_fields.v.data,
                       T = atmosphere_fields.T.data,
                       p = atmosphere_fields.p.data,
                       q = atmosphere_fields.q.data,
                       Qs = atmosphere_fields.Qs.data,
                       Q‚Ñì = atmosphere_fields.Q‚Ñì.data,
                       Mp = atmosphere_fields.Mp.data,
                       h_b‚Ñì = atmosphere.boundary_layer_height)

    flux_formulation = coupled_model.interfaces.atmosphere_sea_ice_interface.flux_formulation
    interface_fluxes = coupled_model.interfaces.atmosphere_sea_ice_interface.fluxes
    net_top_heat_flux = coupled_model.interfaces.net_fluxes.sea_ice_top.heat
    interface_temperature = coupled_model.interfaces.atmosphere_sea_ice_interface.temperature
    interface_properties = coupled_model.interfaces.atmosphere_sea_ice_interface.properties
    sea_ice_properties = coupled_model.interfaces.sea_ice_properties
    ocean_properties = coupled_model.interfaces.ocean_properties

    atmosphere_properties = (thermodynamics_parameters = atmosphere.thermodynamics_parameters,
                             reference_height = atmosphere.reference_height)

    kernel_parameters = surface_computations_kernel_parameters(grid)

    launch!(arch, grid, kernel_parameters,
            _compute_atmosphere_sea_ice_interface_state!,
            interface_fluxes,
            interface_temperature,
            net_top_heat_flux,
            grid,
            clock,
            flux_formulation,
            interior_state,
            atmosphere_data,
            interface_properties,
            atmosphere_properties,
            sea_ice_properties,
            ocean_properties)

    return nothing
end

""" Compute turbulent fluxes between an atmosphere and a interface state using similarity theory """
@kernel function _compute_atmosphere_sea_ice_interface_state!(interface_fluxes,
                                                              interface_temperature,
                                                              net_top_heat_flux,
                                                              grid,
                                                              clock,
                                                              turbulent_flux_formulation,
                                                              interior_state,
                                                              atmosphere_state,
                                                              interface_properties,
                                                              atmosphere_properties,
                                                              sea_ice_properties,
                                                              ocean_properties)

    i, j = @index(Global, NTuple)
    k·¥∫   = size(grid, 3) # index of the top ocean cell
    time = Time(clock.time)
    FT = eltype(grid)

    @inbounds begin
        u‚Çê = atmosphere_state.u[i, j, 1]
        v‚Çê = atmosphere_state.v[i, j, 1]
        T‚Çê = atmosphere_state.T[i, j, 1]
        p‚Çê = atmosphere_state.p[i, j, 1]
        q‚Çê = atmosphere_state.q[i, j, 1]
        Qs = atmosphere_state.Qs[i, j, 1]
        Q‚Ñì = atmosphere_state.Q‚Ñì[i, j, 1]

        # Extract state variables at cell centers
        # Ocean properties below sea ice
        T·µ¢ = interior_state.T‚Çí[i, j, k·¥∫]
        T·µ¢ = convert_to_kelvin(ocean_properties.temperature_units, T·µ¢)
        S·µ¢ = interior_state.S‚Çí[i, j, k·¥∫]

        # Sea ice properties
        u·µ¢ = zero(FT) # ‚Ñëx·∂ú·µÉ·µÉ(i, j, 1, grid, interior_state.u)
        v·µ¢ = zero(FT) # ‚Ñëy·µÉ·∂ú·µÉ(i, j, 1, grid, interior_state.v)
        h·µ¢ = interior_state.h[i, j, 1]
        ‚Ñµ·µ¢ = interior_state.‚Ñµ[i, j, 1]
        T‚Çõ = interface_temperature[i, j, 1]
        T‚Çõ = convert_to_kelvin(sea_ice_properties.temperature_units, T‚Çõ)
    end

    # Build thermodynamic and dynamic states in the atmosphere and interface.
    # Notation:
    #   ‚ãÖ ùí¨ ‚â° thermodynamic state vector
    #   ‚ãÖ ùí∞ ‚â° "dynamic" state vector (thermodynamics + reference height + velocity)
    ‚ÑÇ‚Çê = atmosphere_properties.thermodynamics_parameters
    ùí¨‚Çê = thermodynamic_atmospheric_state = AtmosphericThermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çê, q‚Çê)
    z‚Çê = atmosphere_properties.reference_height # elevation of atmos variables relative to interface

    local_atmosphere_state = (z = z‚Çê,
                              u = u‚Çê,
                              v = v‚Çê,
                              ùí¨ = ùí¨‚Çê,
                              h_b‚Ñì = atmosphere_state.h_b‚Ñì)

    downwelling_radiation = (; Qs, Q‚Ñì)
    local_interior_state = (u=u·µ¢, v=v·µ¢, T=T·µ¢, S=S·µ¢, h=h·µ¢)

    # Estimate initial interface state
    u‚òÖ = convert(FT, 1e-4)

    # Estimate interface specific humidity using interior temperature
    q_formulation = interface_properties.specific_humidity_formulation
    q‚Çõ = saturation_specific_humidity(q_formulation, ‚ÑÇ‚Çê, ùí¨‚Çê.œÅ, T‚Çõ, S·µ¢)

    # Guess
    S‚Çõ = zero(FT) # what should we use for interface salinity?
    initial_interface_state = InterfaceState(u‚òÖ, u‚òÖ, u‚òÖ, u·µ¢, v·µ¢, T‚Çõ, S‚Çõ, convert(FT, q‚Çõ))
    land = inactive_node(i, j, k·¥∫, grid, Center(), Center(), Center())
    ice_free = h·µ¢ == 0

    if (land | ice_free)
        interface_state = InterfaceState(zero(FT), zero(FT), zero(FT), u·µ¢, v·µ¢, T·µ¢, S‚Çõ, zero(FT))
    else
        interface_state = compute_interface_state(turbulent_flux_formulation,
                                                  initial_interface_state,
                                                  local_atmosphere_state,
                                                  local_interior_state,
                                                  downwelling_radiation,
                                                  interface_properties,
                                                  atmosphere_properties,
                                                  sea_ice_properties)
    end

    u‚òÖ = interface_state.u‚òÖ
    Œ∏‚òÖ = interface_state.Œ∏‚òÖ
    q‚òÖ = interface_state.q‚òÖ

    #=
    Pr = similarity_theory.turbulent_prandtl_number
    Œ∏‚òÖ = Œ∏‚òÖ / Pr
    q‚òÖ = q‚òÖ / Pr
    =#

    Œ®‚Çõ = interface_state
    Œ®‚Çê = local_atmosphere_state
    Œîu, Œîv = velocity_difference(turbulent_flux_formulation.bulk_velocity, Œ®‚Çê, Œ®‚Çõ)
    ŒîU = sqrt(Œîu^2 + Œîv^2)
    œÑx = - u‚òÖ^2 * Œîu / ŒîU
    œÑy = - u‚òÖ^2 * Œîv / ŒîU

    œÅ‚Çê = AtmosphericThermodynamics.air_density(‚ÑÇ‚Çê, ùí¨‚Çê)
    c‚Çö = AtmosphericThermodynamics.cp_m(‚ÑÇ‚Çê, ùí¨‚Çê) # moist heat capacity
    ‚Ñ∞s = AtmosphericThermodynamics.latent_heat_sublim(‚ÑÇ‚Çê, ùí¨‚Çê)

    œÉ = interface_properties.radiation.œÉ
    Œ± = stateindex(interface_properties.radiation.Œ±, i, j, 1, grid, time)
    œµ = stateindex(interface_properties.radiation.œµ, i, j, 1, grid, time)
    Qu = upwelling_radiation(Œ®‚Çõ.T, œÉ, œµ)
    Qd = net_downwelling_radiation(downwelling_radiation, Œ±, œµ)

    # Store fluxes
    Qv  = interface_fluxes.latent_heat
    Qc  = interface_fluxes.sensible_heat
    Fv  = interface_fluxes.water_vapor
    œÅœÑx = interface_fluxes.x_momentum
    œÅœÑy = interface_fluxes.y_momentum
    Ts  = interface_temperature
    Œ£Q  = net_top_heat_flux

    @inbounds begin
        # +0: cooling, -0: heating
        Qv[i, j, 1]  = _Qv = - œÅ‚Çê * u‚òÖ * q‚òÖ * ‚Ñ∞s
        Qc[i, j, 1]  = _Qc = - œÅ‚Çê * c‚Çö * u‚òÖ * Œ∏‚òÖ
        Œ£Q[i, j, 1]  = Qu + Qd + _Qv + _Qc
        Fv[i, j, 1]  = - œÅ‚Çê * u‚òÖ * q‚òÖ
        œÅœÑx[i, j, 1] = + œÅ‚Çê * œÑx
        œÅœÑy[i, j, 1] = + œÅ‚Çê * œÑy
        Ts[i, j, 1]  = convert_from_kelvin(sea_ice_properties.temperature_units, Œ®‚Çõ.T)
    end
end

