

struct CoefficientBasedFluxes{CD, CH, CQ, ŒîU, FT}
    drag_coefficient :: CD
    heat_transfer_coefficient :: CH
    vapor_flux_coefficient :: CQ
    bulk_velocity :: ŒîU
    solver_tolerance :: FT
    solver_maxiter :: Int
end

convert_if_number(FT, a::Number) = convert(FT, a)
convert_if_number(FT, a) = a

function CoefficientBasedFluxes(FT = Float64;
                                drag_coefficient = 1e-3,
                                heat_transfer_coefficient = drag_coefficient,
                                vapor_flux_coefficient = drag_coefficient,
                                bulk_velocity = RelativeVelocity(),
                                solver_tolerance = 1e-8,
                                solver_maxiter = 10)

    drag_coefficient = convert_if_number(FT, drag_coefficient)
    heat_transfer_coefficient = convert_if_number(FT, heat_transfer_coefficient)
    vapor_flux_coefficient = convert_if_number(FT, vapor_flux_coefficient)

    return CoefficientBasedFluxes(drag_coefficient,
                                  heat_transfer_coefficient,
                                  vapor_flux_coefficient,
                                  bulk_velocity,
                                  convert(FT, solver_tolerance),
                                  solver_maxiter)
end

@inline function compute_interface_state(flux_formulation::CoefficientBasedFluxes,
                                         initial_interface_state,
                                         atmosphere_state,
                                         interior_state,
                                         downwelling_radiation,
                                         interface_properties,
                                         atmosphere_properties,
                                         interior_properties)

    Œ®‚Çê = atmosphere_state
    Œ®·µ¢ = interior_state
    Œ®‚Çõ‚Åø = Œ®‚Çõ‚Åª = initial_interface_state
    iteration = 0
    maxiter = flux_formulation.solver_maxiter
    tolerance = flux_formulation.solver_tolerance

    while iterating(Œ®‚Çõ‚Åø, Œ®‚Çõ‚Åª, iteration, maxiter, tolerance)
        Œ®‚Çõ‚Åª = Œ®‚Çõ‚Åø
        Œ®‚Çõ‚Åø = iterate_interface_state(flux_formulation,
                                      Œ®‚Çõ‚Åª, Œ®‚Çê, Œ®·µ¢,
                                      downwelling_radiation,
                                      interface_properties,
                                      atmosphere_properties,
                                      interior_properties)
        iteration += 1
    end

    return Œ®‚Çõ‚Åø

end

"""
    iterate_interface_state(flux_formulation, Œ®‚Çõ‚Åø‚Åª¬π, Œ®‚Çê, Œ®·µ¢, Q·µ£, ‚Ñô‚Çõ, ‚Ñô‚Çê, ‚Ñô·µ¢)

Return the nth iterate of the interface state `Œ®‚Çõ‚Åø` computed according to the
`flux_formulation`, given the interface state at the previous iterate `Œ®‚Çõ‚Åø‚Åª¬π`,
as well as the atmosphere state `Œ®‚Çê`, the interior state `Œ®·µ¢`,
downwelling radiation `Q·µ£`, and the interface, atmosphere,
and interior properties `‚Ñô‚Çõ`, `‚Ñô‚Çê`, and `‚Ñô·µ¢`.
"""
@inline function iterate_interface_state(flux_formulation::CoefficientBasedFluxes,
                                         approximate_interface_state,
                                         atmosphere_state,
                                         interior_state,
                                         downwelling_radiation,
                                         interface_properties,
                                         atmosphere_properties,
                                         interior_properties)
    
    T‚Çõ = compute_interface_temperature(interface_properties.temperature_formulation,
                                       approximate_interface_state,
                                       atmosphere_state,
                                       interior_state,
                                       downwelling_radiation,
                                       interface_properties,
                                       atmosphere_properties,
                                       interior_properties)

    # Thermodynamic state
    FT = eltype(approximate_interface_state)
    ‚ÑÇ‚Çê = atmosphere_properties.thermodynamics_parameters
    ùí¨‚Çê = atmosphere_state.ùí¨
    œÅ‚Çê = ùí¨‚Çê.œÅ

    # Recompute the saturation specific humidity at the interface based on the new temperature
    q_formulation = interface_properties.specific_humidity_formulation
    S‚Çõ = approximate_interface_state.S
    q‚Çõ = saturation_specific_humidity(q_formulation, ‚ÑÇ‚Çê, œÅ‚Çê, T‚Çõ, S‚Çõ)

    # Compute the specific humidity increment
    q‚Çê = AtmosphericThermodynamics.vapor_specific_humidity(‚ÑÇ‚Çê, ùí¨‚Çê)
    Œîq = q‚Çê - q‚Çõ

    # Temperature increment including the ``lapse rate'' `Œ± = g / c‚Çö`
    z‚Çê = atmosphere_state.z
    z‚Çõ = zero(FT)
    Œîh = z‚Çê - z‚Çõ
    T‚Çê = AtmosphericThermodynamics.air_temperature(‚ÑÇ‚Çê, ùí¨‚Çê)
    g = 9.81 #flux_formulation.gravitational_acceleration
    c‚Çê = interior_properties.heat_capacity
    Œ∏‚Çê = T‚Çê + g * Œîh / c‚Çê
    ŒîŒ∏ = Œ∏‚Çê - T‚Çõ

    Œîu, Œîv = velocity_difference(flux_formulation.bulk_velocity, atmosphere_state, approximate_interface_state)
    ŒîU = sqrt(Œîu^2 + Œîv^2)

    Cd = flux_formulation.drag_coefficient
    Ch = flux_formulation.heat_transfer_coefficient
    Cq = flux_formulation.vapor_flux_coefficient

    u‚òÖ = sqrt(Cd) * ŒîU
    Œ∏‚òÖ = Ch / sqrt(Cd) * ŒîŒ∏
    q‚òÖ = Cq / sqrt(Cd) * Œîq

    u = approximate_interface_state.u
    v = approximate_interface_state.v
    S = approximate_interface_state.S

    return InterfaceState(u‚òÖ, Œ∏‚òÖ, q‚òÖ, u, v, T‚Çõ, S, convert(FT, q‚Çõ))
end

