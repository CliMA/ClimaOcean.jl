using CUDA: @allowscalar

import ClimaSeaIce
import Thermodynamics as AtmosphericThermodynamics  
using Thermodynamics: Liquid, Ice

#####
##### Interface properties
#####

struct InterfaceProperties{R, Q, T}
    radiation :: R
    specific_humidity_formulation :: Q
    temperature_formulation :: T
end

#####
##### Interface specific humidity formulations
#####

# TODO: allow different saturation models
# struct ClasiusClapyeronSaturation end
struct SpecificHumidityFormulation{Œ¶, X}
    # saturation :: S 
    phase :: Œ¶
    water_mole_fraction :: X
end

"""
    SpecificHumidityFormulation(phase [, water_mole_fraction=1])

Return the formulation for computing specific humidity at an interface.
"""
SpecificHumidityFormulation(phase) = SpecificHumidityFormulation(phase, nothing)

@inline compute_water_mole_fraction(::Nothing, salinity) = 1
@inline compute_water_mole_fraction(x_H‚ÇÇO::Number, salinity) = x_H‚ÇÇO

@inline function saturation_specific_humidity(formulation::SpecificHumidityFormulation, ‚ÑÇ‚Çê, œÅ‚Çõ, T‚Çõ, S‚Çõ=zero(T‚Çõ))
    x_H‚ÇÇO = compute_water_mole_fraction(formulation.water_mole_fraction, S‚Çõ)
    phase = formulation.phase

    CT = eltype(‚ÑÇ‚Çê)
    p‚òÖ = Thermodynamics.saturation_vapor_pressure(‚ÑÇ‚Çê, convert(CT, T‚Çõ), phase)
    q‚òÖ = Thermodynamics.q_vap_saturation_from_density(‚ÑÇ‚Çê, convert(CT, T‚Çõ), convert(CT, œÅ‚Çõ), p‚òÖ)

    # Compute saturation specific humidity according to Raoult's law
    return q‚òÖ * x_H‚ÇÇO
end

struct SalinityConstituent{FT}
    molar_mass :: FT
    mass_fraction :: FT
end

struct WaterMoleFraction{FT, C}
    water_molar_mass :: FT
    salinity_constituents :: C
end

function WaterMoleFraction(FT=Float64)
    water_molar_mass = convert(FT, 18.02)

    # TODO: find reference for these
    salinity_constituents = (
        chloride  = SalinityConstituent{FT}(35.45, 0.56),
        sodium    = SalinityConstituent{FT}(22.99, 0.31),
        sulfate   = SalinityConstituent{FT}(96.06, 0.08),
        magnesium = SalinityConstituent{FT}(24.31, 0.05),
    )

    return SeawaterComposition(water_molar_mass, salinity_constituents)
end

@inline function compute_water_mole_fraction(wmf::WaterMoleFraction, S)
    # TODO: express the concept of "ocean_salinity_units"?
    s = S / 1000 # convert g/kg to concentration

    # Molecular weights
    Œº_H‚ÇÇO = wmf.water_molar_mass

    # Salinity constituents: Cl‚Åª, Na, SO‚ÇÑ, Mg
    Œº_Cl  = wmf.salinity_constituents.chloride.molar_mass
    Œº_Na  = wmf.salinity_constituents.sodium.molar_mass
    Œº_SO‚ÇÑ = wmf.salinity_constituents.sulfate.molar_mass
    Œº_Mg  = wmf.salinity_constituents.magnesium.molar_mass

    # Salinity constituent fractions
    œµ_Cl  = wmf.salinity_constituents.chloride.mass_fraction
    œµ_Na  = wmf.salinity_constituents.sodium.mass_fraction
    œµ_SO‚ÇÑ = wmf.salinity_constituents.sulfate.mass_fraction
    œµ_Mg  = wmf.salinity_constituents.magnesium.mass_fraction

    Œ± = Œº_H‚ÇÇO * (œµ_Cl/Œº_Cl + œµ_Na/Œº_Na  + œµ_SO‚ÇÑ/Œº_SO‚ÇÑ + œµ_Mg/Œº_Mg)

    return (1 - s) / (1 - s + Œ± * s)
end

####
#### Interface temperature formulations
####

"""
    struct BulkTemperature

A type to represent the interface temperature used in fixed-point iteration for interface
fluxes following similarity theory. The interface temperature is not calculated but instead
provided by either the ocean or the sea ice model.
"""
struct BulkTemperature end

# Do nothing (just copy the temperature)
@inline compute_interface_temperature(::BulkTemperature, Œ®‚Çõ, args...) = Œ®‚Çõ.T

####
#### Skin interface temperature calculated as a flux balance
####

""" 
    struct SkinTemperature     

A type to represent the interface temperature used in the flux calculation.
The interface temperature is calculated from the flux balance at the interface.
In particular, the interface temperature ``T‚Çõ`` is the root of:
 
```math
F(T‚Çõ) - J·µÄ = 0
```

where ``J·µÄ`` are the fluxes at the top of the interface (turbulent + radiative), and
``F`` is the internal diffusive flux dependent on the interface temperature itself.

Note that all fluxes positive upwards.
"""
struct SkinTemperature{I}
    internal_flux :: I
end

struct DiffusiveFlux{Z, K}
    Œ¥ :: Z # Boundary layer thickness, as a first guess we will use half the grid spacing
    Œ∫ :: K # diffusivity in m¬≤ s‚Åª¬π
end

# A default constructor for SkinTemperature
function SkinTemperature(FT::DataType=Float64; Œ∫=1e-2, Œ¥=1.0) 
    internal_flux = DiffusiveFlux(FT; Œ∫, Œ¥)
    return SkinTemperature(internal_flux)
end

DiffusiveFlux(FT; Œ∫ = 1e-2, Œ¥ = 1.0) = DiffusiveFlux(convert(FT, Œ¥), convert(FT, Œ∫))

# The flux balance is solved by computing
# 
#            Œ∫ 
# J·µÉ(T‚Çõ‚Åø) + --- (T‚Çõ‚Åø‚Å∫¬π - T·µ¢) = 0
#            Œ¥
#
# where J·µÉ is the external flux impinging on the surface from above and
# J·µ¢ = - Œ∫ (T‚Çõ - T·µ¢) / Œ¥ is the "internal flux" coming up from below.
# We have indicated that J·µÉ may depend on the surface temperature from the previous
# iterate. We thus find that 
#
# T‚Çõ‚Åø‚Å∫¬π = T·µ¢ + Œ¥ * J·µÉ(T‚Çõ‚Åø) / Œ∫
#
# Note that we could also use the fact that J·µÉ(T) = œÉ * œµ * T^4 + ‚ãØ
# to expand J·µÉ around T‚Åø‚Å∫¬π,
#
# J·µÉ(T‚Åø‚Å∫¬π) ‚âà J·µÉ(T‚Åø) + (T‚Åø‚Å∫¬π - T‚Åø) * ‚àÇT_J·µÉ(T‚Åø)
#          ‚âà J·µÉ(T‚Åø) + 4 * (T‚Åø‚Å∫¬π - T‚Åø) œÉ * œµ * T‚Åø^3 / (œÅ c)
#
# which produces the alternative, semi-implicit flux balance
# 
#                                      Œ∫ 
# J·µÉ(T‚Çõ‚Åø) - 4 Œ± T‚Çõ‚Åø‚Å¥ + 4 Œ± T‚Çõ‚Åø T‚Çõ‚Åø¬≥ + --- (T‚Çõ‚Åø‚Å∫¬π - T·µ¢) = 0
#                                      Œ¥
#
# with Œ± = œÉ œµ / (œÅ c) such that
#
# T‚Çõ‚Åø‚Å∫¬π (Œ∫ / Œ¥ + 4 Œ± T‚Çõ‚Åø¬≥) = Œ∫ * T·µ¢ / Œ¥ - J·µÉ + 4 Œ± T‚Çõ‚Åø‚Å¥)
#
# or
#
# T‚Çõ‚Åø‚Å∫¬π = = (T·µ¢ - Œ¥ / Œ∫ * (J·µÉ - 4 Œ± T‚Çõ‚Åø‚Å¥)) / (1 + 4 Œ¥ œÉ œµ T‚Çõ‚Åø¬≥ / œÅ c Œ∫) 
#
# corresponding to a linearization of the outgoing longwave radiation term.
@inline function flux_balance_temperature(F::DiffusiveFlux, Q‚Çê, Œ®‚Çõ, ‚Ñô‚Çõ, Œ®·µ¢, ‚Ñô·µ¢)
    œÅ = ‚Ñô.reference_density
    c = ‚Ñô.heat_capacity
    J·µÄ = Q‚Çê / (œÅ * c)
    return Œ®·µ¢.T + J·µÄ * F.Œ¥ / F.Œ∫
end

# Q + k / h * (TÀ¢ - T·µ¢) = 0
# ‚üπ  T‚Çõ = T·µ¢ - Q * h / k
@inline function flux_balance_temperature(F::ClimaSeaIce.ConductiveFlux, Q‚Çê, Œ®‚Çõ, ‚Ñô‚Çõ, Œ®·µ¢, ‚Ñô·µ¢)
    k = F.conductivity
    h = Œ®·µ¢.h

    # Bottom temperature at the melting temperature
    T·µ¢ = ClimaSeaIce.SeaIceThermodynamics.melting_temperature(‚Ñô·µ¢.liquidus, Œ®·µ¢.S)
    T·µ¢ = convert_to_kelvin(‚Ñô·µ¢.temperature_units, T·µ¢)
    T‚Çõ‚Åª = Œ®‚Çõ.T

    #=
    @show T·µ¢ T‚Çõ‚Åª
    @show Q‚Çê
    @show h
    @show k
    @show Q‚Çê * h / k
    =#

    k *= 100
    T‚Çõ = T·µ¢ - Q‚Çê * h / k

    #=
    œÉ = ‚Ñô‚Çõ.radiation.œÉ
    œµ = ‚Ñô‚Çõ.radiation.œµ
    Œ± = œÉ * œµ
    T‚Çõ = (T·µ¢ - h / k * (Q‚Çê + 4Œ± * T‚Çõ‚Åª^4)) / (1 + 4Œ± * h * T‚Çõ‚Åª^3 / k)
    T‚Çõ = ifelse(isnan(T‚Çõ), T‚Çõ‚Åª, T‚Çõ)
    =#

    # @show T‚Çõ

    # Under heating fluxes, cap surface temperature by melting temperature
    T‚Çò = ‚Ñô·µ¢.liquidus.freshwater_melting_temperature
    T‚Çò = convert_to_kelvin(‚Ñô·µ¢.temperature_units, T‚Çò)

    # Don't let it go below 0?
    T‚Çõ = max(zero(T‚Çõ), T‚Çõ)

    return min(T‚Çõ, T‚Çò)
end

@inline function compute_interface_temperature(st::SkinTemperature,
                                               interface_state,
                                               atmosphere_state,
                                               interior_state,
                                               downwelling_radiation,
                                               interface_properties,
                                               atmosphere_properties,
                                               interior_properties)

    ‚ÑÇ‚Çê = atmosphere_properties.thermodynamics_parameters
    ùí¨‚Çê = atmosphere_state.ùí¨
    œÅ‚Çê = AtmosphericThermodynamics.air_density(‚ÑÇ‚Çê, ùí¨‚Çê)
    c‚Çê = AtmosphericThermodynamics.cp_m(‚ÑÇ‚Çê, ùí¨‚Çê) # moist heat capacity
    ‚Ñ∞v = AtmosphericThermodynamics.latent_heat_vapor(‚ÑÇ‚Çê, ùí¨‚Çê)

    # upwelling radiation is calculated explicitly 
    T‚Çõ‚Åª = interface_state.T # approximate interface temperature from previous iteration
    œÉ = interface_properties.radiation.œÉ
    œµ = interface_properties.radiation.œµ
    Œ± = interface_properties.radiation.Œ±

    Qu = upwelling_radiation(T‚Çõ‚Åª, œÉ, œµ)
    Qd = net_downwelling_radiation(downwelling_radiation, Œ±, œµ)
    Qr = Qd + Qu # Net radiation (positive out of the ocean)

    u‚òÖ = interface_state.u‚òÖ
    Œ∏‚òÖ = interface_state.Œ∏‚òÖ
    q‚òÖ = interface_state.q‚òÖ
 
    # Turbulent heat fluxes, sensible + latent (positive out of the ocean)
    Qc = - œÅ‚Çê * c‚Çê * u‚òÖ * Œ∏‚òÖ
    Qv = - œÅ‚Çê * ‚Ñ∞v * u‚òÖ * q‚òÖ

    # Net heat flux
    Qa = Qr + Qc + Qv

    T‚Çõ = flux_balance_temperature(st.internal_flux, Qa,
                                  interface_state,
                                  interface_properties,
                                  interior_state,
                                  interior_properties)

    return T‚Çõ
end

######
###### Interface state
######

struct InterfaceState{FT}
    u‚òÖ :: FT # friction velocity
    Œ∏‚òÖ :: FT # flux characteristic temperature
    q‚òÖ :: FT # flux characteristic specific humidity
    u :: FT  # interface x-velocity
    v :: FT  # interface y-velocity
    T :: FT  # interface temperature
    S :: FT  # interface salinity
    q :: FT  # interface specific humidity
end

Base.eltype(::InterfaceState{FT}) where FT = FT

zero_interface_state(FT) = InterfaceState(zero(FT),
                                          zero(FT),
                                          zero(FT),
                                          zero(FT),
                                          zero(FT),
                                          convert(FT, 273.15),
                                          zero(FT),
                                          zero(FT))

