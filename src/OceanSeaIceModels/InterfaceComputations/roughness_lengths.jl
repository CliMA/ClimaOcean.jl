struct MomentumRoughnessLength{FT, G, V}
    gravitational_acceleration :: FT
    air_kinematic_viscosity :: V
    wave_formulation :: G
    smooth_wall_parameter :: FT
    maximum_roughness_length :: FT
end

Base.summary(::MomentumRoughnessLength{FT}) where FT = "MomentumRoughnessLength{$FT}"
Base.show(io::IO, ::MomentumRoughnessLength{FT}) where FT = print(io, "MomentumRoughnessLength{$FT}")

struct ScalarRoughnessLength{FT, V, R}
    air_kinematic_viscosity :: V
    reynolds_number_scaling_function :: R
    maximum_roughness_length :: FT
end

Base.summary(::ScalarRoughnessLength{FT}) where FT = "ScalarRoughnessLength{$FT}"
Base.show(io::IO, ::ScalarRoughnessLength{FT}) where FT = print(io, "ScalarRoughnessLength{$FT}")

struct WindDependentWaveFormulation{FT}
    Umax :: FT
    ‚ÑÇ‚ÇÅ :: FT
    ‚ÑÇ‚ÇÇ :: FT
end

"""
    WindDependentWaveFormulation(FT = Oceananigans.defaults.FloatType;
                                 Umax = 19, ‚ÑÇ‚ÇÅ = 0.0017, ‚ÑÇ‚ÇÇ = -0.005)

A gravity wave parameter based on the wind speed `ŒîU` with the formula `‚ÑÇ‚ÇÅ * max(ŒîU, Umax) + ‚ÑÇ‚ÇÇ`.
"""
WindDependentWaveFormulation(FT=Oceananigans.defaults.FloatType; Umax = 19, ‚ÑÇ‚ÇÅ = 0.0017, ‚ÑÇ‚ÇÇ = -0.005) =
    WindDependentWaveFormulation(convert(FT, Umax),
                                 convert(FT, ‚ÑÇ‚ÇÅ),
                                 convert(FT, ‚ÑÇ‚ÇÇ))

gravity_wave_parameter(Œ±::Number, args...) = Œ±
gravity_wave_parameter(Œ±::WindDependentWaveFormulation, ŒîU) = Œ±.‚ÑÇ‚ÇÅ * max(ŒîU, Œ±.Umax) + Œ±.‚ÑÇ‚ÇÇ

"""
    ScalarRoughnessLength(FT = Float64;
                          air_kinematic_viscosity = temperature_dependent_viscosity,
                          reynolds_number_scaling_function = empirical_scaling_function,
                          maximum_roughness_length = 1.6e-4)

Construct a `ScalarRoughnessLength` object that represents the scalar roughness length
that regulates the exchange of heat and water vapor between the ocean and the atmosphere.

Keyword Arguments
=================

- `air_kinematic_viscosity::Function`: The function to compute the air kinematic viscosity.
- `reynolds_number_scaling_function::Function`: The function to compute the Reynolds number scaling factor.
- `maximum_roughness_length::Float`: The maximum roughness length value. Defaults to `1.6e-4`.
"""
function ScalarRoughnessLength(FT=Oceananigans.defaults.FloatType;
                               air_kinematic_viscosity = 1.5e-5,
                               reynolds_number_scaling_function = ReynoldsScalingFunction(FT),
                               maximum_roughness_length = 1.6e-4) # Values from COARE3.6

    return ScalarRoughnessLength(air_kinematic_viscosity,
                                 reynolds_number_scaling_function,
                                 convert(FT, maximum_roughness_length))
end

"""
    MomentumRoughnessLength(FT = Float64;
                            gravitational_acceleration = default_gravitational_acceleration,
                            maximum_roughness_length = 1.0,
                            air_kinematic_viscosity = 1.5e-5,
                            wave_formulation = 0.011,
                            smooth_wall_parameter = 0.11)

Construct a `MomentumRoughnessLength` object that represents the momentum roughness length that
regulates the exchange of momentum, heat, and water vapor between the ocean and the atmosphere.

Keyword Arguments
=================

- `gravitational_acceleration`: The gravitational acceleration. Default: `default_gravitational_acceleration`.
- `maximum_roughness_length`: The maximum roughness length. Default: 1e-1.
- `air_kinematic_viscosity`: The air kinematic viscosity. Default: 1.5e-5.
- `wave_formulation`: The gravity wave parameter. Default: 0.011.
- `smooth_wall_parameter`: The smooth_wall_parameter parameter. Default: 0.11.
"""
function MomentumRoughnessLength(FT=Oceananigans.defaults.FloatType;
                                 gravitational_acceleration = default_gravitational_acceleration,
                                 maximum_roughness_length = 1,
                                 air_kinematic_viscosity = 1.5e-5,
                                 wave_formulation = 0.02,
                                 smooth_wall_parameter = 0.11)

    if wave_formulation isa Number
        wave_formulation = convert(FT, wave_formulation)
    end

    return MomentumRoughnessLength(convert(FT, gravitational_acceleration),
                                   air_kinematic_viscosity,
                                   wave_formulation,
                                   convert(FT, smooth_wall_parameter),
                                   convert(FT, maximum_roughness_length))
end

function default_roughness_lengths(FT=Oceananigans.defaults.FloatType)
    momentum    = MomentumRoughnessLength(FT)
    temperature = ScalarRoughnessLength(FT)
    water_vapor = ScalarRoughnessLength(FT)
    return SimilarityScales(momentum, temperature, water_vapor)
end

# Temperature-dependent viscosity law
struct TemperatureDependentAirViscosity{FT}
    ‚ÑÇ‚ÇÄ :: FT
    ‚ÑÇ‚ÇÅ :: FT
    ‚ÑÇ‚ÇÇ :: FT
    ‚ÑÇ‚ÇÉ :: FT
end

"""
    TemperatureDependentAirViscosity([FT = Oceananigans.defaults.FloatType;
                                      ‚ÑÇ‚ÇÄ = 1.326e-5,
                                      ‚ÑÇ‚ÇÅ = ‚ÑÇ‚ÇÄ * 6.542e-3,
                                      ‚ÑÇ‚ÇÇ = ‚ÑÇ‚ÇÄ * 8.301e-6,
                                      ‚ÑÇ‚ÇÉ = - ‚ÑÇ‚ÇÄ * 4.84e-9])

Construct a `TemperatureDependentAirViscosity` object that calculates the kinematic
viscosity of air as

```math
‚ÑÇ‚ÇÄ + ‚ÑÇ‚ÇÅ T + ‚ÑÇ‚ÇÇ T^2 + ‚ÑÇ‚ÇÉ T^3
```
"""
function TemperatureDependentAirViscosity(FT = Oceananigans.defaults.FloatType;
                                          ‚ÑÇ‚ÇÄ = 1.326e-5,
                                          ‚ÑÇ‚ÇÅ = ‚ÑÇ‚ÇÄ * 6.542e-3,
                                          ‚ÑÇ‚ÇÇ = ‚ÑÇ‚ÇÄ * 8.301e-6,
                                          ‚ÑÇ‚ÇÉ = - ‚ÑÇ‚ÇÄ * 4.84e-9)

    return TemperatureDependentAirViscosity(convert(FT, ‚ÑÇ‚ÇÄ),
                                            convert(FT, ‚ÑÇ‚ÇÅ),
                                            convert(FT, ‚ÑÇ‚ÇÇ),
                                            convert(FT, ‚ÑÇ‚ÇÉ))
end

@inline compute_air_kinematic_viscosity(ŒΩ::Number, ‚ÑÇ, ùí¨) = ŒΩ

""" Calculate the air viscosity based on the temperature Œ∏ in Celsius. """
@inline function compute_air_kinematic_viscosity(ŒΩ::TemperatureDependentAirViscosity, ‚ÑÇ, ùí¨)
    T‚ÇÄ = AtmosphericThermodynamics.air_temperature(‚ÑÇ, ùí¨)
    FT = eltype(ŒΩ.‚ÑÇ‚ÇÄ)
    T‚Ä≤ = convert(FT, T‚ÇÄ - celsius_to_kelvin)
    return ŒΩ.‚ÑÇ‚ÇÄ + ŒΩ.‚ÑÇ‚ÇÅ * T‚Ä≤ + ŒΩ.‚ÑÇ‚ÇÇ * T‚Ä≤^2 + ŒΩ.‚ÑÇ‚ÇÉ * T‚Ä≤^3
end

# Fallbacks for constant roughness length
@inline roughness_length(‚Ñì, u‚òÖ, args...) = ‚Ñì(u‚òÖ, args...)
@inline roughness_length(‚Ñì::Number, args...) = ‚Ñì

# Momentum roughness length should be different from scalar roughness length.
# Temperature and water vapor can be considered the same (Edson et al. 2013)
@inline function roughness_length(‚Ñì::MomentumRoughnessLength{FT}, u‚òÖ, U, ‚ÑÇ‚Çê=nothing, ùí¨‚Çê=nothing) where FT
    ŒΩ = compute_air_kinematic_viscosity(‚Ñì.air_kinematic_viscosity, ‚ÑÇ‚Çê, ùí¨‚Çê)
    g = ‚Ñì.gravitational_acceleration
    ‚ÑÇg = gravity_wave_parameter(‚Ñì.wave_formulation, U)
    ‚ÑÇŒΩ = ‚Ñì.smooth_wall_parameter

    ‚Ñì·µÇ = ‚ÑÇg * u‚òÖ^2 / g # gravity wave roughness length
    ‚Ñì·¥ø = ifelse(‚ÑÇŒΩ == 0, zero(u‚òÖ), ‚ÑÇŒΩ * ŒΩ / u‚òÖ) # viscous sublayer roughness length
    ‚Ñì‚òÖ = ‚Ñì·µÇ + ‚Ñì·¥ø # arbitrary way of combining the two

    # Clip to ‚Ñì_max, deals with u‚òÖ = 0
    ‚Ñì_max = ‚Ñì.maximum_roughness_length
    return min(‚Ñì‚òÖ, ‚Ñì_max)
end

struct ReynoldsScalingFunction{FT}
    A :: FT
    b :: FT
end

"""
    ReynoldsScalingFunction(FT=Float64; A=5.85e-5, b=0.72)


Empirical fit of the scalar roughness length with roughness Reynolds number `R‚òÖ = u‚òÖ ‚Ñìu / ŒΩ`.
Edson et al. (2013), equation (28).

```math
    ‚Ñìs = A / R‚òÖ ^ b
```

See equation (28) by [edson2013exchange](@citet).
"""
ReynoldsScalingFunction(FT = Oceananigans.defaults.FloatType; A = 5.85e-5, b = 0.72) =
    ReynoldsScalingFunction(convert(FT, A), convert(FT, b))

@inline (s::ReynoldsScalingFunction)(R‚òÖ, args...) = ifelse(R‚òÖ == 0, convert(eltype(R‚òÖ), 0), s.A / R‚òÖ ^ s.b)

# Edson 2013 formulation of scalar roughness length in terms of momentum roughness length ‚Ñìu
@inline function roughness_length(‚Ñì::ScalarRoughnessLength{FT}, ‚Ñìu, u‚òÖ, U, ‚ÑÇ=nothing, ùí¨=nothing) where FT
    # Roughness Reynolds number
    ŒΩ = compute_air_kinematic_viscosity(‚Ñì.air_kinematic_viscosity, ‚ÑÇ, ùí¨)
    R‚òÖ = ‚Ñìu * u‚òÖ / ŒΩ

    # implementation of scalar roughness length
    scaling_function = ‚Ñì.reynolds_number_scaling_function
    ‚Ñìs = scaling_function(R‚òÖ, ‚Ñìu, u‚òÖ, ŒΩ)

    # Clip
    ‚Ñì_max = ‚Ñì.maximum_roughness_length
    return min(‚Ñìs, ‚Ñì_max)
end

# Convenience for users
@inline function (‚Ñì::MomentumRoughnessLength{FT})(u‚òÖ, U=nothing, ‚ÑÇ=nothing, ùí¨=nothing) where FT
    return roughness_length(‚Ñì, u‚òÖ, ‚ÑÇ, ùí¨)
end

@inline function (‚Ñì::ScalarRoughnessLength{FT})(u‚òÖ, U=nothing, ‚ÑÇ=nothing, ùí¨=nothing) where FT
    return roughness_length(‚Ñì, u‚òÖ, ‚ÑÇ, ùí¨)
end
