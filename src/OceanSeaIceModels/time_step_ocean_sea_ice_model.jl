using .InterfaceComputations:
    compute_atmosphere_ocean_fluxes!,
    compute_sea_ice_ocean_fluxes!,
    compute_net_ocean_fluxes!,
    interpolate_atmospheric_state!

using ClimaSeaIce: SeaIceModel, SeaIceThermodynamics

using Oceananigans.Grids: œÜnode

using Printf

function time_step!(coupled_model::OceanSeaIceModel, Œît; callbacks=[], compute_tendencies=true)
    ocean = coupled_model.ocean
    sea_ice = coupled_model.sea_ice

    # Be paranoid and update state at iteration 0
    coupled_model.clock.iteration == 0 && update_state!(coupled_model, callbacks)

    # Eventually, split out into OceanOnlyModel
    if sea_ice isa SeaIceSimulation
        h = sea_ice.model.ice_thickness
        fill_halo_regions!(h)

        # Initialization
        if coupled_model.clock.iteration == 0
            @info "Initializing coupled model ice thickness..."
            h‚Åª = coupled_model.interfaces.sea_ice_ocean_interface.previous_ice_thickness
            h‚Åø = coupled_model.sea_ice.model.ice_thickness
            parent(h‚Åª) .= parent(h‚Åø)
        end

        sea_ice.Œît = Œît
        thermodynamic_sea_ice_time_step!(coupled_model)
    end

    # TODO after ice time-step:
    #  - Adjust ocean heat flux if the ice completely melts?
    ocean.Œît = Œît
    time_step!(ocean)

    # TODO:
    # - Store fractional ice-free / ice-covered _time_ for more
    #   accurate flux computation?
    tick!(coupled_model.clock, Œît)
    update_state!(coupled_model, callbacks; compute_tendencies)

    return nothing
end

function update_state!(coupled_model::OceanSeaIceModel, callbacks=[]; compute_tendencies=true)
    time = Time(coupled_model.clock.time)
    update_model_field_time_series!(coupled_model.atmosphere, time)
    interpolate_atmospheric_state!(coupled_model) # This function needs to be specialized by the different atmospheres

    # Compute interface states
    compute_atmosphere_ocean_fluxes!(coupled_model)
    compute_atmosphere_sea_ice_fluxes!(coupled_model)
    compute_sea_ice_ocean_fluxes!(coupled_model)

    compute_net_atmosphere_fluxes!(coupled_model) # This function needs to be specialized by the different atmospheres
    compute_net_ocean_fluxes!(coupled_model)
    #compute_net_sea_ice_fluxes!(coupled_model)

    return nothing
end

function thermodynamic_sea_ice_time_step!(coupled_model)
    sea_ice = coupled_model.sea_ice
    model = sea_ice.model
    Œît = sea_ice.Œît
    grid = coupled_model.ocean.model.grid
    arch = architecture(grid)
    clock = model.clock
    thermodynamics = model.ice_thermodynamics
    ice_thickness = model.ice_thickness
    ice_concentration = model.ice_concentration
    top_external_heat_flux = model.external_heat_fluxes.top
    bottom_external_heat_flux = model.external_heat_fluxes.bottom
    ocean_salinity = coupled_model.ocean.model.tracers.S

    launch!(arch, grid, :xy, update_thickness!,
            ice_thickness,
            grid, Œît,
            ice_concentration,
            ocean_salinity,
            thermodynamics,
            top_external_heat_flux,
            bottom_external_heat_flux,
            clock)

    return nothing
end

@inline function conservative_adjustment(‚Ñµ, h, h·∂ú)
    V = ‚Ñµ * h # = ‚Ñµ‚Å∫ * (h + dh)
    dh = max(zero(h), h·∂ú - h)
    ‚Ñµ‚Å∫ = V / (h + dh)
    return ‚Ñµ‚Å∫, h + dh
end

@kernel function update_thickness!(ice_thickness,
                                   grid, Œît,
                                   ice_concentration,
                                   ocean_salinity,
                                   thermodynamics,
                                   top_external_heat_flux,
                                   bottom_external_heat_flux,
                                   clock)

    i, j = @index(Global, NTuple)
    k·¥∫ = size(grid, 3)

    phase_transitions = thermodynamics.phase_transitions
    top_heat_bc = thermodynamics.heat_boundary_conditions.top
    bottom_heat_bc = thermodynamics.heat_boundary_conditions.bottom
    liquidus = phase_transitions.liquidus

    Qi = thermodynamics.internal_heat_flux
    Qu = top_external_heat_flux
    Qb = bottom_external_heat_flux
    Tu = thermodynamics.top_surface_temperature

    @inbounds begin
        h·∂ú = thermodynamics.ice_consolidation_thickness
        h·µ¢ = ice_thickness[i, j, 1]
        ‚Ñµ·µ¢ = ice_concentration[i, j, 1]
    end

    # Volume conserving adjustment to respect minimum thickness
    ‚Ñµ·µ¢, h·µ¢ = conservative_adjustment(‚Ñµ·µ¢, h·µ¢, h·∂ú)

    # Consolidation criteria
    @inbounds Tu·µ¢ = Tu[i, j, 1]

    # Bottom temperature at the melting temperature
    S‚Çí = @inbounds ocean_salinity[i, j, k·¥∫]
    Tb·µ¢ = SeaIceThermodynamics.melting_temperature(liquidus, S‚Çí)
    ‚Ñ∞b = SeaIceThermodynamics.latent_heat(phase_transitions, Tb·µ¢)
    ‚Ñ∞u = SeaIceThermodynamics.latent_heat(phase_transitions, Tu·µ¢)

    # Retrieve fluxes
    @inbounds begin
        Qu·µ¢ = Qu[i, j, 1]
        Qb·µ¢ = Qb[i, j, 1]
    end

    # If ice is consolidated, compute tendency for an ice slab; otherwise
    # just add ocean fluxes from frazil ice formation or melting
    # wb = - Qb·µ¢ / ‚Ñ∞b

    ùìÄ = Qi.parameters.flux.conductivity
    Qi·µ¢ = - ùìÄ * (Tu·µ¢ - Tb·µ¢) / h·µ¢ * (h·µ¢ > h·∂ú) # getflux(Qi, i, j, grid, Tu·µ¢, clock, model_fields)

    # Upper (top) and bottom interface velocities
    w_top = (Qu·µ¢ - Qi·µ¢) / ‚Ñ∞u # < 0 => melting
    w_bot = +Qi·µ¢ / ‚Ñ∞b # < 0 => freezing
    w_frz = -Qb·µ¢ / ‚Ñ∞b # < 0 => freezing

    Œîh_top = w_top * Œît * ‚Ñµ·µ¢
    Œîh_bot = w_bot * Œît * ‚Ñµ·µ¢

    ŒîV_frz = w_frz * Œît # frazil flux contributes from entire cell

    # Compute frazil growth: lateral first, then vertical
    # dV = dh * ‚Ñµ + h * d‚Ñµ
    d‚Ñµ = min(1 - ‚Ñµ·µ¢, ŒîV_frz / h·µ¢)
    d‚Ñµ = max(d‚Ñµ, zero(d‚Ñµ))
    ‚Ñµ‚Å∫ = ‚Ñµ·µ¢ + d‚Ñµ
    Œîh_frz = ŒîV_frz - h·µ¢ * ‚Ñµ‚Å∫

    Œîh = Œîh_frz + Œîh_bot + Œîh_top

    h‚Å∫ = h·µ¢ + Œîh / ‚Ñµ‚Å∫ * (Œîh > 0)
    h‚Å∫ = max(zero(h‚Å∫), h‚Å∫)

    # Adjust again to be paranoid?
    ‚Ñµ‚Å∫, h‚Å∫ = conservative_adjustment(‚Ñµ‚Å∫, h‚Å∫, h·∂ú)

    @inbounds begin
        ice_thickness[i, j, 1] = h‚Å∫
        ice_concentration[i, j, 1] = ‚Ñµ‚Å∫
    end
end

