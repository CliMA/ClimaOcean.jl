include("runtests_setup.jl")

using ClimaOcean.OceanSeaIceModels.CrossRealmFluxes:    
                                    celsius_to_kelvin, 
                                    convert_to_kelvin, 
                                    SimilarityScales,
                                    seawater_saturation_specific_humidity,
                                    surface_flux

using Thermodynamics
using CUDA

import ClimaOcean.OceanSeaIceModels.CrossRealmFluxes: water_saturation_specific_humidity

struct FixedSpecificHumidity{FT}
    q‚Çí :: FT
end

@inline water_saturation_specific_humidity(h::FixedSpecificHumidity, args...) = h.q‚Çí

@testset "Test surface fluxes" begin
    @info " Testing zero fluxes..."
    for arch in test_architectures
        grid = LatitudeLongitudeGrid(arch;
                                    size = (1, 1), 
                                latitude = 0, 
                               longitude = (-0.5, 0.5), 
                                       z = (-1, 0),
                                topology = (Periodic, Flat, Bounded))
        
        ocean = ocean_simulation(grid; momentum_advection = nothing, 
                                        tracer_advection = nothing, 
                                                closure = nothing,
                                bottom_drag_coefficient = 0.0)

        atmosphere = JRA55_prescribed_atmosphere(1:2; grid, backend = InMemory())
        
        CUDA.@allowscalar begin
            h  = atmosphere.reference_height
            p‚Çê = atmosphere.pressure[1][1, 1, 1]

            T‚Çê = atmosphere.tracers.T[1][1, 1, 1]
            q‚Çê = atmosphere.tracers.q[1][1, 1, 1]
            
            u‚Çê = atmosphere.velocities.u[1][1, 1, 1]
            v‚Çê = atmosphere.velocities.v[1][1, 1, 1]

            ‚ÑÇ‚Çê = atmosphere.thermodynamics_parameters

            # Force the saturation humidity of the ocean to be 
            # equal to the atmospheric saturation humidity
            water_vapor_saturation = FixedSpecificHumidity(q‚Çê)
            water_mole_fraction = 1

            # turbulent fluxes that force a specific humidity at the ocean's surface
            similarity_theory = SimilarityTheoryTurbulentFluxes(grid; water_vapor_saturation, water_mole_fraction)

            # Thermodynamic parameters of the atmosphere
            g  = similarity_theory.gravitational_acceleration
            ùí¨‚Çê = Thermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çê, q‚Çê)
            cp = Thermodynamics.cp_m(‚ÑÇ‚Çê, ùí¨‚Çê)
            œÅ‚Çê = Thermodynamics.air_density(‚ÑÇ‚Çê, ùí¨‚Çê)
            ‚Ñ∞v = Thermodynamics.latent_heat_vapor(‚ÑÇ‚Çê, ùí¨‚Çê)

            # Ensure that the ŒîT between atmosphere and ocean is zero 
            # Note that the ŒîŒ∏ accounts for the "lapse rate" at height h
            T‚Çí = T‚Çê - celsius_to_kelvin + h / cp * g
            
            set!(ocean.model, u = u‚Çê, v = v‚Çê, T = T‚Çí)

            # Compute the turbulent fluxes (neglecting radiation)
            coupled_model    = OceanSeaIceModel(ocean; atmosphere, similarity_theory)
            turbulent_fluxes = coupled_model.fluxes.turbulent.fields

            # Make sure all fluxes are (almost) zero!
            @test turbulent_fluxes.x_momentum[1, 1, 1]    < eps(eltype(grid))
            @test turbulent_fluxes.y_momentum[1, 1, 1]    < eps(eltype(grid))
            @test turbulent_fluxes.sensible_heat[1, 1, 1] < eps(eltype(grid))
            @test turbulent_fluxes.latent_heat[1, 1, 1]   < eps(eltype(grid))
            @test turbulent_fluxes.water_vapor[1, 1, 1]   < eps(eltype(grid))

            @info " Testing neutral fluxes..."
            
            # Constructing very special fluxes that do not account for stability of
            # the atmosphere, have zero gustiness and a constant roughness length of
            # `1e-4` for momentum, water vapor and temperature
            # For this case we can compute the fluxes by hand.
            ‚Ñì = 1e-4
            
            @inline zero_stability_function(Œ∂) = zero(Œ∂)

            stability_functions = SimilarityScales(zero_stability_function, 
                                                zero_stability_function, 
                                                zero_stability_function)

            roughness_lengths = SimilarityScales(‚Ñì, ‚Ñì, ‚Ñì)
            similarity_theory = SimilarityTheoryTurbulentFluxes(grid; 
                                                                roughness_lengths, 
                                                                gustiness_parameter = 0,
                                                                stability_functions)

            # mid-latitude ocean conditions
            set!(ocean.model, u = 0, v = 0, T = 15, S = 30)
            
            coupled_model = OceanSeaIceModel(ocean; atmosphere, similarity_theory)

            # Now manually compute the fluxes:
            T‚Çí = ocean.model.tracers.T[1, 1, 1] + celsius_to_kelvin
            S‚Çí = ocean.model.tracers.S[1, 1, 1]
            q‚Çí = seawater_saturation_specific_humidity(‚ÑÇ‚Çê, T‚Çí, S‚Çí, ùí¨‚Çê,
                                                    similarity_theory.water_mole_fraction,
                                                    similarity_theory.water_vapor_saturation,
                                                    Thermodynamics.Liquid())
            
            ùí¨‚Çí = Thermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çí, q‚Çí)
            q‚Çí = Thermodynamics.vapor_specific_humidity(‚ÑÇ‚Çê, ùí¨‚Çí)

            # Differences!
            Œîu = u‚Çê
            Œîv = v‚Çê
            ŒîU = sqrt(Œîu^2 + Œîv^2)
            ŒîŒ∏ = T‚Çê - T‚Çí + h / cp * g
            Œîq = q‚Çê - q‚Çí
            œ∞  = similarity_theory.von_karman_constant
            
            # Characteristic scales
            u‚òÖ = œ∞ / log(h / ‚Ñì) * ŒîU
            Œ∏‚òÖ = œ∞ / log(h / ‚Ñì) * ŒîŒ∏
            q‚òÖ = œ∞ / log(h / ‚Ñì) * Œîq

            œÑx = - œÅ‚Çê * u‚òÖ^2 * Œîu / sqrt(Œîu^2 + Œîv^2)
            œÑy = - œÅ‚Çê * u‚òÖ^2 * Œîv / sqrt(Œîu^2 + Œîv^2)
            Qs = - œÅ‚Çê * cp * u‚òÖ * Œ∏‚òÖ
            Mv = - œÅ‚Çê * u‚òÖ * q‚òÖ
            Ql = - œÅ‚Çê * u‚òÖ * q‚òÖ * ‚Ñ∞v

            turbulent_fluxes = coupled_model.fluxes.turbulent.fields

            # Make sure fluxes agree with the hand-calculated ones
            @test turbulent_fluxes.x_momentum[1, 1, 1]    ‚âà œÑx
            @test turbulent_fluxes.y_momentum[1, 1, 1]    ‚âà œÑy
            @test turbulent_fluxes.sensible_heat[1, 1, 1] ‚âà Qs
            @test turbulent_fluxes.latent_heat[1, 1, 1]   ‚âà Ql
            @test turbulent_fluxes.water_vapor[1, 1, 1]   ‚âà Mv

        end

        @info " Testing FreezingLimitedOceanTemperature..." 

        grid = LatitudeLongitudeGrid(arch;
                                    size = (2, 2, 10), 
                                latitude = (-0.5, 0.5), 
                               longitude = (-0.5, 0.5), 
                                       z = (-1, 0),
                                topology = (Bounded, Bounded, Bounded))

        ocean = ocean_simulation(grid; momentum_advection = nothing, 
                                        tracer_advection = nothing, 
                                                closure = nothing,
                                bottom_drag_coefficient = 0.0)

        atmosphere = JRA55_prescribed_atmosphere(1:2; grid, backend = InMemory())

        fill!(ocean.model.tracers.T, -2.0)

        CUDA.@allowscalar begin
            ocean.model.tracers.T[1, 2, 10] = 1.0
            ocean.model.tracers.T[2, 1, 10] = 1.0

            # Cap all fluxes exept for heating ones where T < 0
            sea_ice = FreezingLimitedOceanTemperature()

            # Always cooling!
            fill!(atmosphere.tracers.T, 273.15 - 20)

            coupled_model = OceanSeaIceModel(ocean, sea_ice; atmosphere, radiation=nothing)

            turbulent_fluxes = coupled_model.fluxes.turbulent.fields

            # Make sure that the fluxes are zero when the temperature is below the minimum
            # but not zero when it is above
            u, v, _ = ocean.model.velocities
            T, S    = ocean.model.tracers

            for field in (u, v, T, S)
                flux = surface_flux(field)
                @test flux[1, 2, 1] != 0.0 # below freezing and cooling, no flux
                @test flux[2, 1, 1] != 0.0 # below freezing and cooling, no flux
                @test flux[1, 1, 1] == 0.0 # above freezing and cooling
                @test flux[2, 2, 1] == 0.0 # above freezing and cooling
            end

            # Test that the temperature has snapped up to freezing
            @test minimum(ocean.model.tracers.T) == 0
        end
    end
end


