include("runtests_setup.jl")

using ClimaOcean.OceanSeaIceModels.InterfaceComputations:
                                   ComponentInterfaces,
                                   celsius_to_kelvin,
                                   convert_to_kelvin,
                                   SimilarityScales,
                                   saturation_specific_humidity,
                                   surface_flux,
                                   SkinTemperature,
                                   BulkTemperature,
                                   DiffusiveFlux

using Thermodynamics
using CUDA
using KernelAbstractions: @kernel, @index
using Oceananigans.TimeSteppers: update_state!
using Oceananigans.Units: hours, days
using ClimaOcean.DataWrangling: all_dates

using ClimaSeaIce.SeaIceMomentumEquations
using ClimaSeaIce.Rheologies

import ClimaOcean.OceanSeaIceModels.InterfaceComputations: saturation_specific_humidity

using Statistics: mean, std

struct FixedSpecificHumidity{FT}
    q‚Çí :: FT
end

@inline saturation_specific_humidity(h::FixedSpecificHumidity, args...) = h.q‚Çí

@testset "Test surface fluxes" begin
    for arch in test_architectures
        grid = LatitudeLongitudeGrid(arch;
                                     size = 1,
                                     latitude = 10,
                                     longitude = 10,
                                     z = (-1, 0),
                                     topology = (Flat, Flat, Bounded))

        ocean = ocean_simulation(grid;
                                 momentum_advection = nothing,
                                 tracer_advection = nothing,
                                 closure = nothing,
                                 bottom_drag_coefficient = 0.0)

        dates = all_dates(RepeatYearJRA55(), :temperature)
        atmosphere = JRA55PrescribedAtmosphere(arch, Float64; end_date=dates[2], backend = InMemory())

        CUDA.@allowscalar begin
            h  = atmosphere.surface_layer_height
            p‚Çê = atmosphere.pressure[1][1, 1, 1]

            T‚Çê = 15 + celsius_to_kelvin
            q‚Çê = 0.003

            u‚Çê = atmosphere.velocities.u[1][1, 1, 1]
            v‚Çê = atmosphere.velocities.v[1][1, 1, 1]

            ‚ÑÇ‚Çê = atmosphere.thermodynamics_parameters

            fill!(parent(atmosphere.tracers.T),    T‚Çê)
            fill!(parent(atmosphere.tracers.q),    q‚Çê)
            fill!(parent(atmosphere.velocities.u), u‚Çê)
            fill!(parent(atmosphere.velocities.v), v‚Çê)
            fill!(parent(atmosphere.pressure),     p‚Çê)

            # Force the saturation humidity of the ocean to be
            # equal to the atmospheric saturation humidity
            atmosphere_ocean_interface_specific_humidity = FixedSpecificHumidity(q‚Çê)

            # Thermodynamic parameters of the atmosphere
            ùí¨‚Çê = Thermodynamics.PhaseEquil_pTq(‚ÑÇ‚Çê, p‚Çê, T‚Çê, q‚Çê)
            cp = Thermodynamics.cp_m(‚ÑÇ‚Çê, ùí¨‚Çê)
            œÅ‚Çê = Thermodynamics.air_density(‚ÑÇ‚Çê, ùí¨‚Çê)
            ‚Ñ∞v = Thermodynamics.latent_heat_vapor(‚ÑÇ‚Çê, ùí¨‚Çê)

            # No radiation equivalent
            radiation = Radiation(ocean_emissivity=0, ocean_albedo=1)

            # turbulent fluxes that force a specific humidity at the ocean's surface
            for atmosphere_ocean_interface_temperature in (BulkTemperature(), SkinTemperature(DiffusiveFlux(1, 1e-2)))
                @info " Testing zero fluxes with $(atmosphere_ocean_interface_temperature)..."

                interfaces = ComponentInterfaces(atmosphere, ocean;
                                                 radiation,
                                                 atmosphere_ocean_interface_specific_humidity,
                                                 atmosphere_ocean_interface_temperature)

                g = ocean.model.buoyancy.formulation.gravitational_acceleration

                # Ensure that the ŒîT between atmosphere and ocean is zero
                # Note that the ŒîŒ∏ accounts for the "lapse rate" at height h
                T‚Çí = T‚Çê - celsius_to_kelvin + h / cp * g

                fill!(parent(ocean.model.velocities.u), u‚Çê)
                fill!(parent(ocean.model.velocities.v), v‚Çê)
                fill!(parent(ocean.model.tracers.T), T‚Çí)

                # Compute the turbulent fluxes (neglecting radiation)
                coupled_model    = OceanSeaIceModel(ocean; atmosphere, interfaces)
                turbulent_fluxes = coupled_model.interfaces.atmosphere_ocean_interface.fluxes

                # Make sure all fluxes are (almost) zero!
                @test turbulent_fluxes.x_momentum[1, 1, 1]    < eps(eltype(grid))
                @test turbulent_fluxes.y_momentum[1, 1, 1]    < eps(eltype(grid))
                @test turbulent_fluxes.sensible_heat[1, 1, 1] < eps(eltype(grid))
                @test turbulent_fluxes.latent_heat[1, 1, 1]   < eps(eltype(grid))
                @test turbulent_fluxes.water_vapor[1, 1, 1]   < eps(eltype(grid))
            end

            @info " Testing neutral fluxes..."

            # Constructing very special fluxes that do not account for stability of
            # the atmosphere, have zero gustiness and a constant roughness length of
            # `1e-4` for momentum, water vapor and temperature
            # For this case we can compute the fluxes by hand.
            ‚Ñì = 1e-4

            @inline zero_stability_function(Œ∂) = zero(Œ∂)

            stability_functions = SimilarityScales(zero_stability_function,
                                                   zero_stability_function,
                                                   zero_stability_function)

            roughness_lengths = SimilarityScales(‚Ñì, ‚Ñì, ‚Ñì)
            similarity_theory = SimilarityTheoryFluxes(; roughness_lengths,
                                                         gustiness_parameter = 0,
                                                         stability_functions)

            interfaces = ComponentInterfaces(atmosphere, ocean;
                                             atmosphere_ocean_flux_formulation=similarity_theory)

            # mid-latitude ocean conditions
            set!(ocean.model, u = 0, v = 0, T = 15, S = 30)

            coupled_model = OceanSeaIceModel(ocean; atmosphere, interfaces)

            # Now manually compute the fluxes:
            T‚Çí = ocean.model.tracers.T[1, 1, 1] + celsius_to_kelvin
            S‚Çí = ocean.model.tracers.S[1, 1, 1]

            interface_properties = interfaces.atmosphere_ocean_interface.properties
            q_formulation = interface_properties.specific_humidity_formulation
            q‚Çí = saturation_specific_humidity(q_formulation, ‚ÑÇ‚Çê, ùí¨‚Çê.œÅ, T‚Çí, S‚Çí)
            g  = ocean.model.buoyancy.formulation.gravitational_acceleration

            # Differences!
            Œîu = u‚Çê
            Œîv = v‚Çê
            ŒîU = sqrt(Œîu^2 + Œîv^2)
            ŒîŒ∏ = T‚Çê - T‚Çí + h / cp * g
            Œîq = q‚Çê - q‚Çí
            œ∞  = similarity_theory.von_karman_constant

            # Characteristic scales
            u‚òÖ = œ∞ / log(h / ‚Ñì) * ŒîU
            Œ∏‚òÖ = œ∞ / log(h / ‚Ñì) * ŒîŒ∏
            q‚òÖ = œ∞ / log(h / ‚Ñì) * Œîq

            œÑx = - œÅ‚Çê * u‚òÖ^2 * Œîu / sqrt(Œîu^2 + Œîv^2)
            œÑy = - œÅ‚Çê * u‚òÖ^2 * Œîv / sqrt(Œîu^2 + Œîv^2)
            Qs = - œÅ‚Çê * cp * u‚òÖ * Œ∏‚òÖ
            Mv = - œÅ‚Çê * u‚òÖ * q‚òÖ
            Ql = - œÅ‚Çê * u‚òÖ * q‚òÖ * ‚Ñ∞v

            turbulent_fluxes = coupled_model.interfaces.atmosphere_ocean_interface.fluxes

            # Make sure fluxes agree with the hand-calculated ones
            @test turbulent_fluxes.x_momentum[1, 1, 1]    ‚âà œÑx
            @test turbulent_fluxes.y_momentum[1, 1, 1]    ‚âà œÑy
            @test turbulent_fluxes.sensible_heat[1, 1, 1] ‚âà Qs
            @test turbulent_fluxes.latent_heat[1, 1, 1]   ‚âà Ql
            @test turbulent_fluxes.water_vapor[1, 1, 1]   ‚âà Mv
        end

        @info " Testing FreezingLimitedOceanTemperature..."

        grid = LatitudeLongitudeGrid(arch;
                                    size = (2, 2, 10),
                                latitude = (-0.5, 0.5),
                               longitude = (-0.5, 0.5),
                                       z = (-1, 0),
                                topology = (Bounded, Bounded, Bounded))

        ocean = ocean_simulation(grid; momentum_advection = nothing,
                                         tracer_advection = nothing,
                                                 coriolis = nothing,
                                                  closure = nothing,
                                  bottom_drag_coefficient = 0.0)

        dates = all_dates(RepeatYearJRA55(), :temperature)
        atmosphere = JRA55PrescribedAtmosphere(arch; end_date=dates[2], backend = InMemory())

        fill!(ocean.model.tracers.T, -2.0)

        CUDA.@allowscalar begin
            ocean.model.tracers.T[1, 2, 10] = 1.0
            ocean.model.tracers.T[2, 1, 10] = 1.0

            # Cap all fluxes exept for heating ones where T < 0
            sea_ice = FreezingLimitedOceanTemperature()

            # Always cooling!
            fill!(atmosphere.tracers.T, 273.15 - 20)

            coupled_model = OceanSeaIceModel(ocean, sea_ice; atmosphere, radiation)

            # Test that the temperature has snapped up to freezing
            @test minimum(ocean.model.tracers.T) == 0
        end

        @info "Testing Surface Fluxes with sea ice..."

        grid = RectilinearGrid(arch;
                               size = (2, 2, 2),
                             extent = (1, 1, 1),
                           topology = (Periodic, Periodic, Bounded))

        ocean = ocean_simulation(grid; momentum_advection = nothing,
                                         tracer_advection = nothing,
                                                 coriolis = nothing,
                                                  closure = nothing,
                                  bottom_drag_coefficient = 0.0)

        SSU = view(ocean.model.velocities.u, :, :, grid.Nz)
        SSV = view(ocean.model.velocities.v, :, :, grid.Nz)

        œÑo  = SemiImplicitStress(u‚Çë=SSU, v‚Çë=SSV, C·¥∞=0.001, œÅ‚Çë=1000.0)
        œÑua = Field{Face, Center, Nothing}(grid)
        œÑva = Field{Center, Face, Nothing}(grid)

        dynamics = SeaIceMomentumEquation(grid;
                                          top_momentum_stress = (u=œÑua, v=œÑva),
                                          bottom_momentum_stress = œÑo,
                                          rheology = nothing,
                                          solver = ExplicitSolver())

        sea_ice = sea_ice_simulation(grid; dynamics, advection=Centered())

        # Set a velocity for the ocean
        fill!(ocean.model.velocities.u, 0.1)
        fill!(ocean.model.velocities.v, 0.2)
        fill!(ocean.model.tracers.T,   -2.0)

        # Test that we populate the sea-ice ocean stress
        earth = OceanSeaIceModel(ocean, sea_ice; atmosphere, radiation=Radiation())

        œÑx = earth.interfaces.sea_ice_ocean_interface.fluxes.x_momentum
        œÑy = earth.interfaces.sea_ice_ocean_interface.fluxes.y_momentum

        CUDA.@allowscalar begin
            @test œÑx[1, 1, 1] == sqrt(0.1^2 + 0.2^2) * 0.1
            @test œÑy[1, 1, 1] == sqrt(0.1^2 + 0.2^2) * 0.2
        end
    end
end

@testset "Fluxes regression" begin
    for arch in test_architectures
        @info "Testing fluxes regression..."

        grid = LatitudeLongitudeGrid(arch;
                                     size = (20, 20, 20),
                                 latitude = (-60, 60),
                                longitude = (0, 360),
                                        z = (-5000, 0))

        # Speed up compilation by removing all the unnecessary stuff
        momentum_advection = nothing
        tracer_advection   = nothing
        tracers  = (:T, :S)
        buoyancy = nothing
        closure  = nothing
        coriolis = nothing

        ocean = ocean_simulation(grid; momentum_advection, tracer_advection, closure, tracers, coriolis)

        T_metadata = Metadatum(:temperature, date=DateTimeProlepticGregorian(1993, 1, 1), dataset=ECCO4Monthly())
        S_metadata = Metadatum(:salinity,    date=DateTimeProlepticGregorian(1993, 1, 1), dataset=ECCO4Monthly())

        set!(ocean.model; T=T_metadata, S=S_metadata)

        end_date   = all_dates(RepeatYearJRA55(), :temperature)[10]
        atmosphere = JRA55PrescribedAtmosphere(arch; end_date, backend = InMemory())
        radiation  = Radiation(ocean_albedo=0.1, ocean_emissivity=1.0)
        sea_ice    = nothing

        coupled_model = OceanSeaIceModel(ocean, sea_ice; atmosphere, radiation)

        @show coupled_model.sea_ice

        times = 0:1hours:1days
        Ntimes = length(times)

        # average the fluxes over one day
        J·µÄ = interior(ocean.model.tracers.T.boundary_conditions.top.condition, :, :, 1) ./ Ntimes
        JÀ¢ = interior(ocean.model.tracers.S.boundary_conditions.top.condition, :, :, 1) ./ Ntimes
        œÑÀ£ = interior(ocean.model.velocities.u.boundary_conditions.top.condition, :, :, 1) ./ Ntimes
        œÑ ∏ = interior(ocean.model.velocities.v.boundary_conditions.top.condition, :, :, 1) ./ Ntimes

        for time in times[2:end]
            coupled_model.clock.time = time
            update_state!(coupled_model)
            J·µÄ .+= interior(ocean.model.tracers.T.boundary_conditions.top.condition, :, :, 1) ./ Ntimes
            JÀ¢ .+= interior(ocean.model.tracers.S.boundary_conditions.top.condition, :, :, 1) ./ Ntimes
            œÑÀ£ .+= interior(ocean.model.velocities.u.boundary_conditions.top.condition, :, :, 1) ./ Ntimes
            œÑ ∏ .+= interior(ocean.model.velocities.v.boundary_conditions.top.condition, :, :, 1) ./ Ntimes
        end

        J·µÄ_mean = mean(J·µÄ)
        JÀ¢_mean = mean(JÀ¢)
        œÑÀ£_mean = mean(œÑÀ£)
        œÑ ∏_mean = mean(œÑ ∏)

        J·µÄ_std = std(J·µÄ)
        JÀ¢_std = std(JÀ¢)
        œÑÀ£_std = std(œÑÀ£)
        œÑ ∏_std = std(œÑ ∏)

        # Regression test
        @test_broken J·µÄ_mean ‚âà -3.526464713488678e-5
        @test_broken JÀ¢_mean ‚âà 1.1470078542716042e-6
        @test_broken œÑÀ£_mean ‚âà -1.0881334225579832e-5
        @test_broken œÑ ∏_mean ‚âà 5.653281786086694e-6

        @test_broken J·µÄ_std ‚âà 7.477575901188957e-5
        @test_broken JÀ¢_std ‚âà 3.7416720607945508e-6
        @test_broken œÑÀ£_std ‚âà 0.00011349625113971719
        @test_broken œÑ ∏_std ‚âà 7.627885224680635e-5
    end
end

